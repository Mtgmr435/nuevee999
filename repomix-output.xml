This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
app/globals.css
app/layout.tsx
app/level/[id]/page.tsx
app/page.tsx
components.json
components/AssessmentEngine.tsx
components/AuthProvider.tsx
components/CourseCard.tsx
components/CourseList.tsx
components/Dashboard.tsx
components/DeckCarousel.tsx
components/FirstEncountersLevel.tsx
components/Leaderboard.tsx
components/LevelComponent.tsx
components/LoginButton.tsx
components/QuizLevel.tsx
components/RoleplayLevel.tsx
components/ui/badge.tsx
components/ui/button.tsx
components/ui/card.tsx
components/ui/progress.tsx
eslint.config.mjs
hooks/useSound.tsx
lib/confetti.ts
lib/firebase.ts
lib/levelBackgrounds.ts
lib/levels.ts
lib/progress.ts
lib/userTypes.ts
lib/utils.ts
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/CourseList.tsx">
"use client"

import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import {
  MessageCircle,
  Volume2,
  Eye,
  Users,
  Presentation,
  Play,
  Lock,
  CheckCircle,
} from "lucide-react"

interface Level {
  id: number
  title: string
  type: "roleplay" | "quiz" | "story" | "video" | "interactive"
  duration: number
  xpReward: number
  coinReward: number
  isCompleted: boolean
  isUnlocked: boolean
}

interface CourseListProps {
  levels: Level[]
  userData: any
  onBack: () => void
  onStartLevel: (levelId: number) => void
}

export default function CourseList({ levels, userData, onBack, onStartLevel }: CourseListProps) {
  const getLevelIcon = (type: string) => {
    switch (type) {
      case "roleplay":
        return <MessageCircle className="w-6 h-6 text-blue-500" />
      case "interactive":
        return <Volume2 className="w-6 h-6 text-green-500" />
      case "video":
        return <Eye className="w-6 h-6 text-purple-500" />
      case "story":
        return <Users className="w-6 h-6 text-orange-500" />
      case "quiz":
        return <Presentation className="w-6 h-6 text-red-500" />
      default:
        return <Play className="w-6 h-6" />
    }
  }

  return (
    <div
      className="relative min-h-screen bg-cover bg-center bg-no-repeat"
      style={{
        backgroundImage: `url('/jungle-adventure-background.jpg')`, // cambia por el fondo que quieras
      }}
    >
      {/* Degradado encima del fondo */}
      <div className="absolute inset-0 bg-gradient-to-br from-amber-900/30 via-orange-900/20 to-yellow-900/30"></div>

      <div className="relative z-10 max-w-5xl mx-auto px-6 py-12 space-y-8">
        {/* Header */}
        <div className="flex items-center gap-4 mb-6">
          <Button
            variant="outline"
            onClick={onBack}
            className="border-amber-300 text-amber-700 hover:bg-amber-50"
          >
            ‚Üê Volver
          </Button>
          <h1 className="text-2xl font-bold text-white drop-shadow-md">
            Comunicaci√≥n Efectiva
          </h1>
          <div className="text-3xl animate-bounce">ü¶´</div>
        </div>

        {/* Grid de niveles */}
        <div className="grid gap-8">
          {levels.map((level) => {
            const isCompleted = userData.completedLevels.includes(level.id)

            return (
              <Card
                key={level.id}
                className={`relative overflow-hidden rounded-2xl shadow-xl transition-all duration-300
                ${level.isUnlocked ? "cursor-pointer hover:scale-[1.02]" : "opacity-50"}
                ${isCompleted ? "border-green-500 bg-green-50" : "border-amber-200 bg-white/90 backdrop-blur-md"}`}
              >
                <div
                  className="absolute inset-0 opacity-15"
                  style={{
                    backgroundImage: `url('/assets/worlds/selva.png')`, // üëà aqu√≠ puedes cambiar por mundo espec√≠fico
                    backgroundSize: "cover",
                    backgroundPosition: "center",
                  }}
                ></div>

                <CardContent className="p-6 relative z-10">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className="relative">
                        {isCompleted ? (
                          <div className="relative">
                            <CheckCircle className="w-12 h-12 text-green-500" />
                            <div className="absolute -top-1 -right-1 text-xl">‚ú®</div>
                          </div>
                        ) : level.isUnlocked ? (
                          <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-full flex items-center justify-center text-white font-bold shadow-lg">
                            {level.id}
                          </div>
                        ) : (
                          <Lock className="w-12 h-12 text-gray-400" />
                        )}
                      </div>
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          {getLevelIcon(level.type)}
                          <h3 className="text-lg font-bold text-amber-800">{level.title}</h3>
                        </div>
                        <div className="flex items-center gap-4 text-sm text-amber-600">
                          <span>‚è±Ô∏è {level.duration} min</span>
                          <span>‚≠ê {level.xpReward} XP</span>
                          <span>ü™ô {level.coinReward} monedas</span>
                          <Badge variant="secondary" className="lowercase">
                            {level.type}
                          </Badge>
                        </div>
                      </div>
                    </div>

                    {level.isUnlocked && (
                      <Button
                        onClick={() => onStartLevel(level.id)}
                        disabled={!level.isUnlocked}
                        className="bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white shadow-lg"
                      >
                        {isCompleted ? "Repetir" : "Jugar"}
                      </Button>
                    )}
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="lib/levelBackgrounds.ts">
export const levelBackgrounds: Record<string, string> = {
  selva: "/assets/worlds/selva.png",
  montana: "/assets/worlds/montana.png",
  rio: "/assets/worlds/rio.png",
  mercado: "/assets/worlds/mercado.png",
  ciudad: "/assets/worlds/ciudad.png",
}
</file>

<file path="lib/levels.ts">
import { Level } from "@/lib/userTypes"

/**
 * üîπ Aqu√≠ organizamos los cursos por categor√≠a
 * Cada curso tiene sus niveles (quiz / roleplay por ahora).
 * En el futuro puedes meter m√°s tipos: "interactive", "video", etc.
 */
export const courses: Record<string, Level[]> = {
  communication: [
    {
      id: 1,
      title: "Primeros Encuentros",
      type: "roleplay",
      duration: 8,
      xpReward: 50,
      coinReward: 20,
      isCompleted: false,
      isUnlocked: true,
      world: "selva",
    },
    {
      id: 2,
      title: "Escucha Activa",
      type: "quiz",
      duration: 6,
      xpReward: 40,
      coinReward: 15,
      isCompleted: false,
      isUnlocked: true,
      world: "montana",
    },
    {
      id: 3,
      title: "Comunicaci√≥n No Verbal",
      type: "quiz",
      duration: 7,
      xpReward: 45,
      coinReward: 18,
      isCompleted: false,
      isUnlocked: false,
      world: "rio",
    },
    {
      id: 4,
      title: "Resolviendo Malentendidos",
      type: "roleplay",
      duration: 9,
      xpReward: 60,
      coinReward: 25,
      isCompleted: false,
      isUnlocked: false,
      world: "ciudad",
    },
  ],

  leadership: [
    {
      id: 1,
      title: "Liderazgo Positivo",
      type: "quiz",
      duration: 6,
      xpReward: 40,
      coinReward: 15,
      isCompleted: false,
      isUnlocked: true,
      world: "mercado",
    },
    {
      id: 2,
      title: "Tomando Decisiones Dif√≠ciles",
      type: "roleplay",
      duration: 10,
      xpReward: 70,
      coinReward: 30,
      isCompleted: false,
      isUnlocked: false,
      world: "rio",
    },
  ],

  creativity: [
    {
      id: 1,
      title: "Pensamiento Lateral",
      type: "quiz",
      duration: 7,
      xpReward: 45,
      coinReward: 20,
      isCompleted: false,
      isUnlocked: true,
      world: "mercado",
    },
    {
      id: 2,
      title: "Improvisaci√≥n en Equipo",
      type: "roleplay",
      duration: 8,
      xpReward: 55,
      coinReward: 22,
      isCompleted: false,
      isUnlocked: false,
      world: "selva",
    },
  ],
}

/**
 * üîπ Helper para obtener todos los niveles de todos los cursos
 * (por si quieres listarlos en una sola vista de roadmap)
 */
export const allLevels: Level[] = Object.values(courses).flat()
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  /* Updated color tokens to match jungle-themed gamified design for Gen Z */
  --background: #ffffff;
  --foreground: #374151;
  --card: #f0fdf4;
  --card-foreground: #1f2937;
  --popover: #ffffff;
  --popover-foreground: #374151;
  --primary: #15803d;
  --primary-foreground: #ffffff;
  --secondary: #84cc16;
  --secondary-foreground: #1f2937;
  --muted: #f0fdf4;
  --muted-foreground: #4b5563;
  --accent: #6366f1;
  --accent-foreground: #ffffff;
  --destructive: #f87171;
  --destructive-foreground: #ffffff;
  --border: #d1d5db;
  --input: #f8fafc;
  --ring: #84cc16;
  --chart-1: #6366f1;
  --chart-2: #fbbf24;
  --chart-3: #f472b6;
  --chart-4: #6ee7b7;
  --chart-5: #60a5fa;
  --radius: 0.5rem;
  --sidebar: #f0fdf4;
  --sidebar-foreground: #374151;
  --sidebar-primary: #15803d;
  --sidebar-primary-foreground: #ffffff;
  --sidebar-accent: #84cc16;
  --sidebar-accent-foreground: #1f2937;
  --sidebar-border: #d1d5db;
  --sidebar-ring: #84cc16;
}

.dark {
  /* Updated dark mode colors to maintain jungle theme with better contrast */
  --background: #0f172a;
  --foreground: #f1f5f9;
  --card: #1e293b;
  --card-foreground: #f1f5f9;
  --popover: #1e293b;
  --popover-foreground: #f1f5f9;
  --primary: #22c55e;
  --primary-foreground: #0f172a;
  --secondary: #84cc16;
  --secondary-foreground: #0f172a;
  --muted: #334155;
  --muted-foreground: #94a3b8;
  --accent: #6366f1;
  --accent-foreground: #f1f5f9;
  --destructive: #f87171;
  --destructive-foreground: #f1f5f9;
  --border: #334155;
  --input: #334155;
  --ring: #84cc16;
  --chart-1: #6366f1;
  --chart-2: #fbbf24;
  --chart-3: #f472b6;
  --chart-4: #6ee7b7;
  --chart-5: #60a5fa;
  --sidebar: #1e293b;
  --sidebar-foreground: #f1f5f9;
  --sidebar-primary: #22c55e;
  --sidebar-primary-foreground: #0f172a;
  --sidebar-accent: #84cc16;
  --sidebar-accent-foreground: #0f172a;
  --sidebar-border: #334155;
  --sidebar-ring: #84cc16;
}

@theme inline {
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Added custom animations for gamification elements */
@keyframes bounce-in {
  0% {
    transform: scale(0.3);
    opacity: 0;
  }
  50% {
    transform: scale(1.05);
  }
  70% {
    transform: scale(0.9);
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    box-shadow: 0 0 5px rgba(132, 204, 22, 0.5);
  }
  50% {
    box-shadow: 0 0 20px rgba(132, 204, 22, 0.8);
  }
}

.animate-bounce-in {
  animation: bounce-in 0.6s ease-out;
}

.animate-pulse-glow {
  animation: pulse-glow 2s ease-in-out infinite;
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="components/AuthProvider.tsx">
"use client"

import { ReactNode, createContext, useContext, useEffect, useState } from "react"
import { onAuthStateChanged, User } from "firebase/auth"
import { auth } from "@/lib/firebase"

type AuthContextType = { user: User | null; loading: boolean }
const AuthContext = createContext<AuthContextType>({ user: null, loading: true })

export function useAuth() {
    return useContext(AuthContext)
}

export function AuthProvider({ children }: { children: ReactNode }) {
    const [user, setUser] = useState<User | null>(null)
    const [loading, setLoading] = useState(true)

    useEffect(() => {
        const unsub = onAuthStateChanged(auth, (u) => {
            setUser(u)
            setLoading(false)
        })
        return () => unsub()
    }, [])

    return <AuthContext.Provider value={{ user, loading }}>{children}</AuthContext.Provider>
}
</file>

<file path="components/CourseCard.tsx">
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"

interface CourseCardProps {
  course: {
    id: string
    title: string
    description: string
    icon: string
    color: string
    totalLevels: number
    completedLevels: number
  }
  isActive?: boolean
  onSelect: () => void
  className?: string
}

export default function CourseCard({ course, isActive = false, onSelect, className = "" }: CourseCardProps) {
  const progressPercentage = (course.completedLevels / course.totalLevels) * 100

  return (
    <Card
      className={`
        relative overflow-hidden cursor-pointer transition-all duration-300 border-2
        ${
          isActive
            ? "border-amber-400 shadow-2xl scale-105 z-10"
            : "border-amber-200 shadow-lg hover:shadow-xl opacity-75 hover:opacity-90"
        }
        ${className}
      `}
      onClick={onSelect}
      style={{
        aspectRatio: "3/4",
        minHeight: "320px",
      }}
    >
      <div className={`h-3 bg-gradient-to-r ${course.color}`} />

      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="text-4xl mb-2">{course.icon}</div>
          <div className="text-xs bg-amber-100 text-amber-800 px-2 py-1 rounded-full font-medium">
            {course.completedLevels}/{course.totalLevels}
          </div>
        </div>
        <CardTitle className="text-lg text-amber-800 leading-tight">{course.title}</CardTitle>
        <p className="text-sm text-amber-600 line-clamp-2">{course.description}</p>
      </CardHeader>

      <CardContent className="pt-0">
        <div className="mb-4">
          <div className="flex justify-between text-xs text-amber-700 mb-1">
            <span>Progreso</span>
            <span>{Math.round(progressPercentage)}%</span>
          </div>
          <Progress value={progressPercentage} className="h-2" />
        </div>

        <Button
          className={`w-full ${
            isActive
              ? "bg-amber-500 hover:bg-amber-600 text-white shadow-md"
              : "bg-amber-100 hover:bg-amber-200 text-amber-800"
          }`}
          onClick={(e) => {
            e.stopPropagation()
            onSelect()
          }}
        >
          {course.completedLevels === 0 ? "Comenzar" : "Continuar"}
        </Button>
      </CardContent>

      {course.completedLevels === course.totalLevels && (
        <div className="absolute top-2 right-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full font-bold">
          ‚úì Completado
        </div>
      )}
    </Card>
  )
}
</file>

<file path="components/Dashboard.tsx">
"use client"
import { useEffect, useState } from "react"
import { useAuth } from "./AuthProvider"
import { getProgress, saveProgress, updateStreak, getLeaderboard } from "@/lib/progress"

export default function Dashboard() {
    const { user } = useAuth()
    const [progress, setProgress] = useState<any>(null)
    const [streak, setStreak] = useState<number | null>(null)
    const [leaders, setLeaders] = useState<any[]>([])

    // üîπ Cargar progreso, racha y ranking
    useEffect(() => {
        if (user) {
            // Leer progreso guardado
            getProgress(user.uid).then((data) => {
                if (data) setProgress(data)
                else setProgress({ level: 1, points: 0 })
            })

            // Actualizar racha
            updateStreak(user.uid, user.displayName || "Jugador An√≥nimo").then((data) => {
                setStreak(data?.streak || 1)
            })
        }

        // Ranking visible para todos (incluso invitados)
        getLeaderboard(10).then((data) => {
            setLeaders(data)
        })
    }, [user])

    // üîπ Actualizar progreso (sumar puntos)
    const handleUpdate = async () => {
        if (user && progress) {
            const newProgress = { ...progress, points: progress.points + 10 }
            setProgress(newProgress)
            await saveProgress(user.uid, newProgress)
        }
    }

    return (
        <div style={{ padding: "20px", fontFamily: "Arial" }}>
            {/* Si hay usuario logueado */}
            {user ? (
                <div>
                    <h1>Hola {user.displayName} üëã</h1>

                    <div style={{
                        marginTop: "15px",
                        padding: "15px",
                        border: "2px solid #eee",
                        borderRadius: "12px",
                        maxWidth: "320px"
                    }}>
                        <p>‚≠ê Nivel: {progress?.level}</p>
                        <p>üéØ Puntos: {progress?.points}</p>
                        <p style={{ fontSize: "20px", fontWeight: "bold", color: "orangered" }}>
                            üî• Racha: {streak} {streak === 1 ? "d√≠a" : "d√≠as"}
                        </p>
                    </div>

                    <button
                        onClick={handleUpdate}
                        style={{
                            marginTop: "20px",
                            padding: "10px 15px",
                            background: "orange",
                            border: "none",
                            borderRadius: "8px",
                            color: "white",
                            cursor: "pointer",
                            fontSize: "16px"
                        }}
                    >
                        ‚ûï Sumar 10 puntos
                    </button>
                </div>
            ) : (
                <h2>üëã Bienvenido invitado</h2>
            )}

            {/* Leaderboard visible siempre */}
            <div style={{ marginTop: "30px" }}>
                <h2>üèÜ Ranking de Rachas</h2>
                {leaders.length === 0 && <p>No hay jugadores a√∫n.</p>}

                <ol style={{ paddingLeft: "20px" }}>
                    {leaders.map((player, index) => (
                        <li key={player.id} style={{ marginBottom: "8px" }}>
                            <span style={{ fontWeight: "bold" }}>#{index + 1}</span>{" "}
                            {player.name || "Jugador An√≥nimo"} ‚Üí üî• {player.streak} d√≠as
                        </li>
                    ))}
                </ol>
            </div>
        </div>
    )
}
</file>

<file path="components/DeckCarousel.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { ChevronLeft, ChevronRight } from "lucide-react"
import CourseCard from "./CourseCard"

interface Course {
  id: string
  title: string
  description: string
  icon: string
  color: string
  totalLevels: number
  completedLevels: number
}

interface DeckCarouselProps {
  courses: Course[]
  onCourseSelect: (courseId: string) => void
}

export default function DeckCarousel({ courses, onCourseSelect }: DeckCarouselProps) {
  const [activeIndex, setActiveIndex] = useState(0)

  const goToPrevious = () => {
    setActiveIndex((prev) => (prev === 0 ? courses.length - 1 : prev - 1))
  }

  const goToNext = () => {
    setActiveIndex((prev) => (prev === courses.length - 1 ? 0 : prev + 1))
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "ArrowLeft") goToPrevious()
    if (e.key === "ArrowRight") goToNext()
  }

  return (
    <div className="relative w-full max-w-4xl mx-auto" onKeyDown={handleKeyDown} tabIndex={0}>
      <div className="relative h-96 flex items-center justify-center perspective-1000">
        {courses.map((course, index) => {
          const offset = index - activeIndex
          const isActive = index === activeIndex

          return (
            <div
              key={course.id}
              className={`
                absolute transition-all duration-500 ease-out
                ${isActive ? "z-20" : "z-10"}
              `}
              style={{
                transform: `
                  translateX(${offset * 120}px) 
                  translateZ(${isActive ? 0 : -100}px)
                  rotateY(${offset * -15}deg)
                  scale(${isActive ? 1 : 0.85})
                `,
                opacity: Math.abs(offset) > 1 ? 0 : isActive ? 1 : 0.6,
              }}
            >
              <CourseCard
                course={course}
                isActive={isActive}
                onSelect={() => onCourseSelect(course.id)}
                className="w-64"
              />
            </div>
          )
        })}
      </div>

      <div className="flex justify-center gap-4 mt-6">
        <Button
          onClick={goToPrevious}
          variant="outline"
          size="sm"
          className="border-amber-300 text-amber-700 hover:bg-amber-50 bg-transparent"
        >
          <ChevronLeft className="w-4 h-4" />
        </Button>

        <div className="flex items-center gap-2">
          {courses.map((_, index) => (
            <button
              key={index}
              onClick={() => setActiveIndex(index)}
              className={`w-2 h-2 rounded-full transition-colors ${
                index === activeIndex ? "bg-amber-500" : "bg-amber-200"
              }`}
            />
          ))}
        </div>

        <Button
          onClick={goToNext}
          variant="outline"
          size="sm"
          className="border-amber-300 text-amber-700 hover:bg-amber-50 bg-transparent"
        >
          <ChevronRight className="w-4 h-4" />
        </Button>
      </div>
    </div>
  )
}
</file>

<file path="components/FirstEncountersLevel.tsx">
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { MessageCircle, Lightbulb, Star, ArrowRight } from "lucide-react"

interface Choice {
  id: string
  text: string
  points: number
  feedback: string
  capibaraTip: string
}

interface Scenario {
  id: number
  situation: string
  character: string
  choices: Choice[]
}

const scenarios: Scenario[] = [
  {
    id: 1,
    situation:
      "Te encuentras en una conferencia de networking y ves a alguien interesante cerca de la mesa de caf√©. ¬øC√≥mo te acercas?",
    character: "Profesional de marketing",
    choices: [
      {
        id: "a",
        text: "Me acerco directamente y digo: 'Hola, soy [nombre], ¬øen qu√© trabajas?'",
        points: 60,
        feedback: "Directo pero un poco abrupto. Podr√≠as ser m√°s c√°lido en tu aproximaci√≥n.",
        capibaraTip: "Recuerda que la primera impresi√≥n es clave. ¬°Sonr√≠e siempre y muestra inter√©s genuino!",
      },
      {
        id: "b",
        text: "Espero a que termine de servirse caf√© y comento: 'Este caf√© huele incre√≠ble, ¬øhas probado los pasteles?'",
        points: 90,
        feedback: "¬°Excelente! Iniciaste con algo neutral y amigable que invita a la conversaci√≥n.",
        capibaraTip: "¬°Perfecto! Usar el entorno como punto de partida es una t√©cnica genial üéâ",
      },
      {
        id: "c",
        text: "Me quedo esperando a que esa persona me hable primero",
        points: 20,
        feedback: "Muy pasivo. Las oportunidades de networking requieren que tomes la iniciativa.",
        capibaraTip: "¬°Vamos, explorador! La confianza se construye con pr√°ctica. ¬°Int√©ntalo de nuevo!",
      },
    ],
  },
  {
    id: 2,
    situation: "La conversaci√≥n va bien y quieres conocer m√°s sobre su trabajo. ¬øQu√© preguntas?",
    character: "Profesional de marketing",
    choices: [
      {
        id: "a",
        text: "¬øCu√°nto ganas en tu trabajo?",
        points: 10,
        feedback: "¬°Demasiado personal! Esta pregunta puede hacer que la persona se sienta inc√≥moda.",
        capibaraTip: "¬°Ups! Evita temas muy personales al principio. Mejor enf√≥cate en sus intereses profesionales.",
      },
      {
        id: "b",
        text: "¬øQu√© es lo que m√°s te gusta de trabajar en marketing?",
        points: 95,
        feedback: "¬°Perfecto! Esta pregunta muestra inter√©s genuino y permite que la persona comparta su pasi√≥n.",
        capibaraTip: "¬°Excelente elecci√≥n! Las preguntas sobre pasiones crean conexiones aut√©nticas ‚ú®",
      },
      {
        id: "c",
        text: "Ah, marketing... debe ser f√°cil, ¬øno?",
        points: 30,
        feedback: "Esto puede sonar condescendiente. Evita minimizar el trabajo de otros.",
        capibaraTip: "Recuerda mostrar respeto por el trabajo de otros. ¬°Cada profesi√≥n tiene sus desaf√≠os!",
      },
    ],
  },
]

export default function FirstEncountersLevel() {
  const [currentScenario, setCurrentScenario] = useState(0)
  const [selectedChoice, setSelectedChoice] = useState<string | null>(null)
  const [showFeedback, setShowFeedback] = useState(false)
  const [totalPoints, setTotalPoints] = useState(0)
  const [showCapibaraTip, setShowCapibaraTip] = useState(false)

  const handleChoiceSelect = (choice: Choice) => {
    setSelectedChoice(choice.id)
    setShowFeedback(true)
    setTotalPoints((prev) => prev + choice.points)

    // Show capybara tip after a delay
    setTimeout(() => {
      setShowCapibaraTip(true)
    }, 1500)
  }

  const nextScenario = () => {
    if (currentScenario < scenarios.length - 1) {
      setCurrentScenario((prev) => prev + 1)
      setSelectedChoice(null)
      setShowFeedback(false)
      setShowCapibaraTip(false)
    }
  }

  const currentScene = scenarios[currentScenario]
  const selectedChoiceData = currentScene.choices.find((c) => c.id === selectedChoice)

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 to-orange-100 relative overflow-hidden">
      {/* Animated jungle background */}
      <div
        className="absolute inset-0 opacity-30"
        style={{
          backgroundImage: `url('/jungle-campfire-night-scene-animated.png')`,
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      ></div>

      <div className="relative z-10 max-w-4xl mx-auto p-6">
        {/* Header */}
        <Card className="mb-6 border-amber-200 bg-white/90 backdrop-blur-sm">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <MessageCircle className="w-8 h-8 text-amber-600" />
                <div>
                  <CardTitle className="text-2xl text-amber-800">Primeros Encuentros</CardTitle>
                  <p className="text-amber-600">Aprende a hacer una primera impresi√≥n positiva</p>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <Badge className="bg-amber-500 text-white">
                  <Star className="w-4 h-4 mr-1" />
                  {totalPoints} puntos
                </Badge>
                <div className="text-4xl animate-bounce">ü¶´</div>
              </div>
            </div>
            <Progress value={((currentScenario + 1) / scenarios.length) * 100} className="mt-4" />
            <p className="text-sm text-amber-600">
              Escenario {currentScenario + 1} de {scenarios.length}
            </p>
          </CardHeader>
        </Card>

        {/* Main scenario */}
        <Card className="mb-6 border-amber-200 bg-white/95 backdrop-blur-sm">
          <CardContent className="p-8">
            <div className="mb-6">
              <Badge variant="outline" className="mb-4 border-amber-300 text-amber-700">
                {currentScene.character}
              </Badge>
              <h3 className="text-xl font-semibold text-amber-800 mb-4">{currentScene.situation}</h3>
            </div>

            {/* Choices */}
            <div className="space-y-4">
              {currentScene.choices.map((choice) => (
                <Button
                  key={choice.id}
                  variant={selectedChoice === choice.id ? "default" : "outline"}
                  className={`w-full text-left p-6 h-auto justify-start ${
                    selectedChoice === choice.id
                      ? "bg-amber-500 hover:bg-amber-600 text-white"
                      : "border-amber-200 text-amber-800 hover:bg-amber-50"
                  }`}
                  onClick={() => handleChoiceSelect(choice)}
                  disabled={showFeedback}
                >
                  <div className="flex items-start gap-3">
                    <span className="font-bold text-lg">{choice.id.toUpperCase()})</span>
                    <span className="text-base leading-relaxed">{choice.text}</span>
                  </div>
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Feedback */}
        {showFeedback && selectedChoiceData && (
          <Card className="mb-6 border-green-200 bg-green-50/90 backdrop-blur-sm animate-in slide-in-from-bottom duration-500">
            <CardContent className="p-6">
              <div className="flex items-start gap-4">
                <div className="text-3xl">
                  {selectedChoiceData.points >= 80 ? "üéâ" : selectedChoiceData.points >= 60 ? "üëç" : "üí≠"}
                </div>
                <div className="flex-1">
                  <h4 className="font-semibold text-green-800 mb-2">+{selectedChoiceData.points} puntos</h4>
                  <p className="text-green-700">{selectedChoiceData.feedback}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Capybara tip */}
        {showCapibaraTip && selectedChoiceData && (
          <Card className="mb-6 border-blue-200 bg-blue-50/90 backdrop-blur-sm animate-in slide-in-from-right duration-700">
            <CardContent className="p-6">
              <div className="flex items-start gap-4">
                <div className="text-4xl animate-bounce">ü¶´</div>
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <Lightbulb className="w-5 h-5 text-blue-600" />
                    <h4 className="font-semibold text-blue-800">Consejo de Capi</h4>
                  </div>
                  <p className="text-blue-700">{selectedChoiceData.capibaraTip}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Next button */}
        {showFeedback && (
          <div className="text-center">
            {currentScenario < scenarios.length - 1 ? (
              <Button
                onClick={nextScenario}
                className="bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white px-8 py-3 text-lg"
              >
                Siguiente Escenario
                <ArrowRight className="w-5 h-5 ml-2" />
              </Button>
            ) : (
              <Button className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white px-8 py-3 text-lg">
                ¬°Completar Nivel!
                <Star className="w-5 h-5 ml-2" />
              </Button>
            )}
          </div>
        )}
      </div>
    </div>
  )
}
</file>

<file path="components/Leaderboard.tsx">
"use client"
import { useEffect, useState } from "react"
import { getLeaderboard } from "@/lib/progress"

export default function Leaderboard() {
    const [leaders, setLeaders] = useState<any[]>([])

    useEffect(() => {
        getLeaderboard(10).then((data) => {
            setLeaders(data)
        })
    }, [])

    return (
        <div style={{ marginTop: "30px" }}>
            <h2>üèÜ Ranking de Rachas</h2>
            {leaders.length === 0 && <p>No hay jugadores a√∫n.</p>}

            <ol style={{ paddingLeft: "20px" }}>
                {leaders.map((user, index) => (
                    <li key={user.id} style={{ marginBottom: "8px" }}>
                        <span style={{ fontWeight: "bold" }}>
                            #{index + 1}
                        </span>{" "}
                        {user.name || "Jugador An√≥nimo"} ‚Üí üî• {user.streak} d√≠as
                    </li>
                ))}
            </ol>
        </div>
    )
}
</file>

<file path="components/RoleplayLevel.tsx">
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Star, Zap, Heart, MessageCircle, Trophy, ArrowLeft } from "lucide-react"
import { levelBackgrounds } from "@/lib/levelBackgrounds"

// üëá tipos de datos
interface Choice {
  text: string
  points: number
  principle: string
  nextScene: number
  feedback: string
}

interface Scene {
  id: number
  title: string
  description: string
  capibaraExpression: string
  situation: string
  choices: Choice[]
}

interface RoleplayLevelProps {
  levelId: number
  world: "selva" | "montana" | "rio" | "mercado" | "ciudad"
  onComplete: (score: number, badges: string[]) => void
  onExit: () => void
}

// üëá aqu√≠ usas tus escenas
const communicationScenes: Scene[] = [
  {
    id: 1,
    title: "üåø Primer Encuentro",
    description: "Llegas a un campamento de capibaras exploradoras...",
    capibaraExpression: "üôÇ",
    situation: "Situaci√≥n: Es tu primer d√≠a y necesitas presentarte al grupo.",
    choices: [
      {
        text: "Con una sonrisa c√°lida y contacto visual directo",
        points: 20,
        principle: "Empat√≠a",
        nextScene: 2,
        feedback: "¬°Excelente! Mostraste apertura y calidez.",
      },
      {
        text: "Con un saludo r√°pido sin mirar mucho",
        points: 5,
        principle: "Pasividad",
        nextScene: 2,
        feedback: "Podr√≠a ser mejor, falt√≥ conexi√≥n.",
      },
      {
        text: "Esperando a que ella hable primero",
        points: 2,
        principle: "Inseguridad",
        nextScene: 2,
        feedback: "Oportunidad perdida, deber√≠as tomar la iniciativa.",
      },
    ],
  },
  {
    id: 2,
    title: "üéØ Fin del nivel",
    description: "Has terminado este roleplay de prueba.",
    capibaraExpression: "ü§ó",
    situation: "¬°Felicidades! Completaste el nivel.",
    choices: [],
  },
]

// üëá insignias de ejemplo
const badges = [
  { name: "Emp√°tico", threshold: 20, icon: Heart },
  { name: "Comunicador", threshold: 30, icon: MessageCircle },
]

export default function RoleplayLevel({
  levelId,
  world,
  onComplete,
  onExit,
}: RoleplayLevelProps) {
  const [currentScene, setCurrentScene] = useState(1)
  const [score, setScore] = useState(0)
  const [earnedBadges, setEarnedBadges] = useState<string[]>([])
  const [showFeedback, setShowFeedback] = useState(false)
  const [lastChoice, setLastChoice] = useState<Choice | null>(null)

  const scene = communicationScenes.find((s) => s.id === currentScene)
  const backgroundImage = levelBackgrounds[world] || levelBackgrounds["selva"]

  const makeChoice = (choiceIndex: number) => {
    if (!scene) return
    const choice = scene.choices[choiceIndex]
    const newScore = score + choice.points

    setLastChoice(choice)
    setShowFeedback(true)
    setScore(newScore)

    // otorgar badges
    const newBadges = badges
      .filter((badge) => newScore >= badge.threshold && !earnedBadges.includes(badge.name))
      .map((badge) => badge.name)

    if (newBadges.length > 0) {
      setEarnedBadges([...earnedBadges, ...newBadges])
    }

    setTimeout(() => {
      setShowFeedback(false)
      if (choice.nextScene === 2) {
        onComplete(newScore, [...earnedBadges, ...newBadges])
      } else {
        setCurrentScene(choice.nextScene)
      }
    }, 2000)
  }

  if (!scene) return null

  // vista de feedback
  if (showFeedback && lastChoice) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-white/80">
        <Card className="max-w-lg w-full animate-bounce-in">
          <CardContent className="p-6 text-center">
            <div className="text-5xl mb-4">‚ú®</div>
            <h3 className="text-xl font-bold mb-2">¬°Tu elecci√≥n!</h3>
            <p className="mb-2">+{lastChoice.points} puntos</p>
            <Badge>{lastChoice.principle}</Badge>
            <p className="text-sm mt-2">{lastChoice.feedback}</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  // vista normal
  return (
    <div
      className="min-h-screen bg-cover bg-center bg-no-repeat relative"
      style={{ backgroundImage: `url(${backgroundImage})` }}
    >
      <div className="absolute inset-0 bg-black/20"></div>

      <div className="relative z-10 max-w-4xl mx-auto py-8 space-y-6">
        {/* Header */}
        <Card className="bg-white/80">
          <CardHeader>
            <div className="flex items-center justify-between">
              <Button variant="ghost" onClick={onExit}>
                <ArrowLeft className="w-4 h-4 mr-2" /> Salir
              </Button>
              <div className="flex items-center gap-4">
                <Star className="w-5 h-5 text-yellow-500" />
                <span className="font-bold">{score} pts</span>
              </div>
            </div>
            <Progress value={(currentScene / communicationScenes.length) * 100} />
          </CardHeader>
        </Card>

        {/* Escena */}
        <Card>
          <CardHeader>
            <CardTitle>{scene.title}</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="mb-4">{scene.description}</p>
            <div className="text-6xl mb-4">{scene.capibaraExpression}</div>
            <p className="italic mb-6">{scene.situation}</p>

            {/* Opciones */}
            {scene.choices.map((choice, index) => (
              <Button
                key={index}
                onClick={() => makeChoice(index)}
                className="w-full mb-3"
              >
                {choice.text}
              </Button>
            ))}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
</file>

<file path="components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.config({
    extends: ["next/core-web-vitals", "next/typescript"],
    rules: {
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-unused-vars": "off"
    }
  })
];

export default eslintConfig;
</file>

<file path="hooks/useSound.tsx">
// hooks/useSound.ts
import { useCallback } from "react"

export default function useSound(url: string, volume: number = 0.5) {
  const play = useCallback(() => {
    const audio = new Audio(url)
    audio.volume = volume
    audio.play().catch(() => {})
  }, [url, volume])

  return play
}
</file>

<file path="lib/confetti.ts">
import confetti from "canvas-confetti"

export function launchConfetti() {
  confetti({
    particleCount: 100,
    spread: 70,
    origin: { y: 0.6 },
    colors: ["#FFD700", "#FF69B4", "#87CEFA", "#32CD32"]
  })
}
</file>

<file path="lib/progress.ts">
import { doc, setDoc, getDoc, collection, getDocs, query, orderBy, limit } from "firebase/firestore"
import { db } from "./firebase"

// üîπ Guardar progreso del usuario
export async function saveProgress(userId: string, progress: any) {
    try {
        await setDoc(doc(db, "progress", userId), progress, { merge: true })
        console.log("‚úÖ Progreso guardado")
    } catch (error) {
        console.error("‚ùå Error al guardar progreso:", error)
    }
}

// üîπ Leer progreso del usuario
export async function getProgress(userId: string) {
    try {
        const ref = doc(db, "progress", userId)
        const snap = await getDoc(ref)

        if (snap.exists()) {
            return snap.data()
        } else {
            return null // No tiene progreso a√∫n
        }
    } catch (error) {
        console.error("‚ùå Error al leer progreso:", error)
    }
}

// üîπ Actualizar y verificar racha del usuario
export async function updateStreak(userId: string, displayName?: string) {
    const today = new Date()
    const todayStr = today.toISOString().split("T")[0] // YYYY-MM-DD

    const ref = doc(db, "progress", userId)
    const snap = await getDoc(ref)

    if (snap.exists()) {
        const data = snap.data()
        const lastLogin = data.lastLogin
        const streak = data.streak || 0

        if (lastLogin === todayStr) {
            // Ya entr√≥ hoy ‚Üí no cambiar
            return { streak, lastLogin }
        }

        const yesterday = new Date()
        yesterday.setDate(today.getDate() - 1)
        const yesterdayStr = yesterday.toISOString().split("T")[0]

        let newStreak = 1
        if (lastLogin === yesterdayStr) {
            newStreak = streak + 1 // sigui√≥ la racha
        }

        await setDoc(ref, {
            ...data,
            name: displayName || data.name || "Jugador An√≥nimo",
            streak: newStreak,
            lastLogin: todayStr,
        }, { merge: true })

        return { streak: newStreak, lastLogin: todayStr }
    } else {
        // Primera vez que entra
        await setDoc(ref, {
            name: displayName || "Jugador An√≥nimo",
            streak: 1,
            lastLogin: todayStr,
            level: 1,
            points: 0
        })
        return { streak: 1, lastLogin: todayStr }
    }
}

// üîπ Obtener ranking de rachas (Leaderboard)
export async function getLeaderboard(top: number = 10) {
    try {
        const q = query(
            collection(db, "progress"),
            orderBy("streak", "desc"),
            limit(top)
        )

        const querySnapshot = await getDocs(q)
        const leaderboard: any[] = []

        querySnapshot.forEach((doc) => {
            leaderboard.push({
                id: doc.id,
                ...doc.data()
            })
        })

        return leaderboard
    } catch (error) {
        console.error("‚ùå Error al cargar leaderboard:", error)
        return []
    }
}
</file>

<file path="lib/userTypes.ts">
export interface UserData {
  level: number
  xp: number
  coins: number
  gems: number
  lives: number
  maxLives: number
  lastDailyChest: string | null
  completedLevels: number[]
  badges: string[]
  currentPet: string
  unlockedPets: string[]
}

export interface Pet {
  id: string
  name: string
  icon: string
  price: number
  unlocked: boolean
}

export const pets: Pet[] = [
  { id: "baby-capybara", name: "Capi Beb√©", icon: "üêπ", price: 0, unlocked: true },
  { id: "adult-capybara", name: "Capi Adulto", icon: "ü¶´", price: 200, unlocked: false },
  { id: "golden-capybara", name: "Capi Dorado", icon: "‚ú®ü¶´", price: 1000, unlocked: false },
  { id: "ninja-capybara", name: "Capi Ninja", icon: "ü•∑ü¶´", price: 1500, unlocked: false },
]
export interface Level {
  id: number
  title: string
  type: "roleplay" | "quiz" | "story" | "video" | "interactive"
  duration: number
  xpReward: number
  coinReward: number
  isCompleted: boolean
  isUnlocked: boolean
  world: "selva" | "montana" | "rio" | "mercado" | "ciudad"
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="next.config.ts">
// next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  eslint: {
    // No detiene el build si hay errores de ESLint
    ignoreDuringBuilds: true,
  },
  typescript: {
    // No detiene el build si hay errores de TypeScript
    ignoreBuildErrors: true,
  },
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="app/layout.tsx">
// app/layout.tsx
import type React from "react"
import type { Metadata } from "next"
import { GeistSans } from "geist/font/sans"
import { GeistMono } from "geist/font/mono"
import { Analytics } from "@vercel/analytics/next"
import { Suspense } from "react"
import "./globals.css"
import { AuthProvider } from "@/components/AuthProvider" // <‚Äî a√±ade esto

export const metadata: Metadata = {
  title: "Nu9ve Academy - Habilidades Blandas Gamificadas",
  description: "Aprende habilidades blandas de forma divertida con capibaras",
  generator: "v0.app",
}

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="es">
      
      <body className={`font-sans ${GeistSans.variable} ${GeistMono.variable} antialiased`}>
        <AuthProvider>
          <Suspense fallback={null}>{children}</Suspense>
        </AuthProvider>
        <Analytics />
      </body>
    </html>
  )
}
</file>

<file path="app/level/[id]/page.tsx">
"use client"
import { useRouter } from "next/navigation"
import RoleplayLevel from "@/components/RoleplayLevel"
import QuizLevel from "@/components/QuizLevel"

interface LevelPageProps {
  params: {
    id: string
  }
}

export default function LevelPage({ params }: LevelPageProps) {
  const router = useRouter()
  const levelId = Number.parseInt(params.id)

  // Determinar el tipo de nivel basado en el ID
// app/level/[id]/page.tsx
const getLevelType = (id: number) => {
  if (id === 1) return "roleplay"
  return "quiz" // el resto como quiz
}
  const levelType = getLevelType(levelId)

  const handleComplete = (score: number, badges: string[]) => {
    // Aqu√≠ guardar√≠as el progreso en localStorage o base de datos
    console.log(`Level ${levelId} completed with score: ${score}, badges: ${badges}`)
    router.push("/")
  }

  const handleExit = () => {
    router.push("/")
  }

  if (levelType === "roleplay") {
    return <RoleplayLevel levelId={levelId} onComplete={handleComplete} onExit={handleExit} />
  }

  if (levelType === "quiz") {
    return <QuizLevel levelId={levelId} onComplete={handleComplete} onExit={handleExit} />
  }

  // Placeholder para otros tipos de niveles
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50 p-4 flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-2xl font-bold mb-4">Nivel {levelId}</h1>
        <p className="text-muted-foreground mb-4">Tipo: {levelType}</p>
        <p className="text-sm text-muted-foreground">Este tipo de nivel estar√° disponible pronto</p>
      </div>
    </div>
  )
}
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import useSound from "@/hooks/useSound"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  onClick,
  disableClickSound = false, // üëà nuevo prop opcional
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
    disableClickSound?: boolean
  }) {
  const Comp = asChild ? Slot : "button"
  const playClick = useSound("/sounds/click.mp3")

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      onClick={(e: any) => {
        if (!disableClickSound) {
          playClick()
        }
        if (onClick) {
          onClick(e)
        }
      }}
      {...props}
    />
  )
}

export { Button, buttonVariants }
</file>

<file path="lib/firebase.ts">
// lib/firebase.ts
import { initializeApp, getApps, getApp } from "firebase/app"
import {
    getAuth,
    GoogleAuthProvider,
    setPersistence,
    browserLocalPersistence,
} from "firebase/auth"
import { getFirestore } from "firebase/firestore"

const firebaseConfig = {
    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY!,
    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN!,
    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID!,
    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET!,
    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID!,
    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID!,
}

// Evita re-crear la app en HMR
export const app = getApps().length ? getApp() : initializeApp(firebaseConfig)

// Auth + proveedor Google
export const auth = getAuth(app)
export const googleProvider = new GoogleAuthProvider()
export const db = getFirestore(app)
googleProvider.setCustomParameters({ prompt: "select_account" })

// Persistencia en el navegador
setPersistence(auth, browserLocalPersistence).catch(() => {
    // Silencia errores de persistencia (p.ej., privacidad del navegador)
})
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
     "baseUrl": ".",
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"] 
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="components/AssessmentEngine.tsx">
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Heart, Lightbulb, Award, Star } from "lucide-react"

interface AssessmentItem {
  id: string
  question: string
  options: {
    text: string
    correct: boolean
    points: number
  }[]
  feedback: {
    correct: string
    incorrect: string
  }
  hint?: string
}

interface AssessmentLevel {
  id: string
  title: string
  type: "roleplay" | "quiz" | "story" | "interactive"
  hasContinuity: boolean
  items: AssessmentItem[]
  background?: string
  story?: string
}

interface AssessmentEngineProps {
  level: AssessmentLevel
  userData: any
  onComplete: (result: AssessmentResult) => void
  onBack: () => void
  onLoseLife: () => void
}

interface AssessmentResult {
  score: number
  mistakes: number
  firstTryCorrect: number
  medal: "platinum" | "gold" | "silver"
  timeMs: number
}

export default function AssessmentEngine({ level, userData, onComplete, onBack, onLoseLife }: AssessmentEngineProps) {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [selectedOption, setSelectedOption] = useState<number | null>(null)
  const [showFeedback, setShowFeedback] = useState(false)
  const [score, setScore] = useState(0)
  const [mistakes, setMistakes] = useState(0)
  const [firstTryCorrect, setFirstTryCorrect] = useState(0)
  const [retryQueue, setRetryQueue] = useState<AssessmentItem[]>([])
  const [isRetryRound, setIsRetryRound] = useState(false)
  const [hintUsed, setHintUsed] = useState(false)
  const [startTime] = useState(Date.now())
  const [attemptedItems, setAttemptedItems] = useState<Set<string>>(new Set())
  const [shuffledItems, setShuffledItems] = useState<AssessmentItem[]>([])
  const isRoleplay = level.type === "roleplay"

  const petDataMap: Record<"baby-capybara" | "adult-capybara" | "golden-capybara" | "ninja-capybara", { icon: string; name: string }> = {
    "baby-capybara": { icon: "üêπ", name: "Capi Beb√©" },
    "adult-capybara": { icon: "ü¶´", name: "Capi Adulto" },
    "golden-capybara": { icon: "‚ú®ü¶´", name: "Capi Dorado" },
    "ninja-capybara": { icon: "ü•∑ü¶´", name: "Capi Ninja" },
  }
  const petData = petDataMap[userData.currentPet as keyof typeof petDataMap] || { icon: "üêπ", name: "Capi Beb√©" }

  // Initialize shuffled items for quiz levels
  useEffect(() => {
    if (!level.hasContinuity) {
      // Shuffle items with stable seed for resume capability
      const shuffled = [...level.items].sort(() => Math.random() - 0.5)
      setShuffledItems(shuffled)
    } else {
      setShuffledItems(level.items)
    }
  }, [level])

  const currentItems = isRetryRound ? retryQueue : shuffledItems
  const currentItem = currentItems[currentIndex]

  const calculateMedal = (mistakeCount: number): "platinum" | "gold" | "silver" => {
    if (mistakeCount === 0) return "platinum"
    if (mistakeCount <= 2) return "gold"
    return "silver"
  }

  const handleOptionSelect = (optionIndex: number) => {
  setSelectedOption(optionIndex)
  const option = currentItem.options[optionIndex]
  const isFirstTry = !attemptedItems.has(currentItem.id)

  if (option.correct) {
    const points = isFirstTry ? option.points + 25 : option.points
    setScore((prev) => prev + points)
    if (isFirstTry) setFirstTryCorrect((prev) => prev + 1)
    if (isRetryRound) {
      // Saca del retryQueue si era de revisi√≥n
      setRetryQueue((prev) => prev.filter((item) => item.id !== currentItem.id))
    }
  } else {
    setMistakes((prev) => prev + 1)
    setScore((prev) => prev - 50)
    onLoseLife()
    setAttemptedItems((prev) => new Set(prev).add(currentItem.id))

    // SOLO los quizzes se revisan al final
    if (!isRoleplay && !isRetryRound) {
      setRetryQueue((prev) => prev.find((i) => i.id === currentItem.id) ? prev : [...prev, currentItem])
    }
  }

  setShowFeedback(true)
}

// Reemplaza handleNext:
const handleNext = () => {
  const option = currentItem.options[selectedOption!]

  if (isRoleplay) {
    // Roleplay: reintento inmediato hasta acertar
    if (option.correct) {
      if (currentIndex < currentItems.length - 1) {
        setCurrentIndex((prev) => prev + 1)
        resetForNextItem()
      } else {
        completeAssessment()
      }
    } else {
      // Reintentar esta misma
      resetForNextItem()
    }
    return
  }

  // Quiz:
  if (!isRetryRound) {
    // Primera pasada: AVANZAR SIEMPRE, haya sido correcto o no
    if (currentIndex < currentItems.length - 1) {
      setCurrentIndex((prev) => prev + 1)
      resetForNextItem()
    } else {
      // Primera pasada terminada ‚Üí ver si hay revisi√≥n
      if (retryQueue.length > 0) {
        setIsRetryRound(true)
        setCurrentIndex(0)
        resetForNextItem()
      } else {
        completeAssessment()
      }
    }
  } else {
    // En revisi√≥n: quedarse hasta acertar
    if (option.correct) {
      if (retryQueue.filter((item) => item.id !== currentItem.id).length === 0) {
        completeAssessment()
      } else {
        setCurrentIndex(0) // volvemos al inicio de la cola que queda
        resetForNextItem()
      }
    } else {
      // Reintentar esta misma
      resetForNextItem()
    }
  }
}

  const resetForNextItem = () => {
    setSelectedOption(null)
    setShowFeedback(false)
    setHintUsed(false)
  }

  const completeAssessment = () => {
    const timeMs = Date.now() - startTime
    const medal = calculateMedal(mistakes)

    const result: AssessmentResult = {
      score,
      mistakes,
      firstTryCorrect,
      medal,
      timeMs,
    }

    onComplete(result)
  }

  const showHint = () => {
    if (!hintUsed && currentItem.hint) {
      setHintUsed(true)
    }
  }

  const getMedalIcon = (medal: string) => {
    switch (medal) {
      case "platinum":
        return <Award className="w-5 h-5 text-blue-500" />
      case "gold":
        return <Award className="w-5 h-5 text-yellow-500" />
      case "silver":
        return <Award className="w-5 h-5 text-gray-400" />
      default:
        return <Star className="w-5 h-5 text-gray-300" />
    }
  }

  if (!currentItem) {
    return (
      <div className="max-w-4xl mx-auto p-6 text-center">
        <h2 className="text-2xl font-bold mb-4">Cargando...</h2>
      </div>
    )
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="flex items-center gap-4 mb-6">
        <Button variant="outline" onClick={onBack} className="border-amber-300 text-amber-700 bg-transparent">
          ‚Üê Volver al curso
        </Button>
        <h1 className="text-2xl font-bold text-amber-800">{level.title}</h1>
        <div className="text-3xl animate-bounce">{petData.icon}</div>
        <div className="flex items-center gap-4 ml-auto">
          <div className="flex items-center gap-2">
            <Heart className="w-5 h-5 text-red-500" />
            <span className="font-bold text-red-600">
              {userData.lives}/{userData.maxLives}
            </span>
          </div>
          <div className="flex items-center gap-2">
            {getMedalIcon(calculateMedal(mistakes))}
            <span className="text-sm text-gray-600">
              {mistakes === 0 ? "Platino" : mistakes <= 2 ? "Oro" : "Plata"}
            </span>
          </div>
        </div>
      </div>

      <Card className="relative overflow-hidden border-2 border-amber-300">
        {level.background && (
          <div
            className="absolute inset-0 opacity-20"
            style={{
              backgroundImage: `url('${level.background}')`,
              backgroundSize: "cover",
              backgroundPosition: "center",
            }}
          />
        )}

        <CardContent className="p-8 relative z-10">
          <div className="mb-2 flex items-center justify-between">
  <span className="text-sm font-medium text-amber-800">Progreso</span>
  <span className="text-xs text-amber-700">
    {isRetryRound && level.type === "quiz"
      ? "Corrigiendo errores"
      : `${currentIndex + 1} / ${currentItems.length}`}
  </span>
</div>

<Progress
  className="h-2"
  value={
    isRetryRound && level.type === "quiz"
      ? 100
      : Math.round(((currentIndex + 1) / Math.max(1, currentItems.length)) * 100)
  }
/>
          {currentIndex === 0 && level.story && !isRetryRound && (
            <div className="mb-6 p-4 bg-amber-50 rounded-lg border border-amber-200">
              <p className="text-amber-800">{level.story}</p>
            </div>
          )}

          <div className="mb-6 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="text-4xl">{petData.icon}</div>
              <div>
                <p className="text-sm text-amber-600">{petData.name} est√° aqu√≠ para ayudarte</p>
                {hintUsed && currentItem.hint && (
                  <div className="mt-2 p-3 bg-blue-50 rounded-lg border border-blue-200">
                    <p className="text-blue-800 text-sm">üí° {currentItem.hint}</p>
                  </div>
                )}
              </div>
            </div>
            {currentItem.hint && (
              <Button
                onClick={showHint}
                disabled={hintUsed}
                variant="outline"
                size="sm"
                className="border-blue-300 text-blue-700 bg-transparent"
              >
                <Lightbulb className="w-4 h-4 mr-2" />
                {hintUsed ? "Pista usada" : "Pedir pista"}
              </Button>
            )}
          </div>

          <div className="mb-6">
            <h3 className="text-xl font-semibold mb-4 text-amber-800">{currentItem.question}</h3>
            <div className="space-y-3">
              {currentItem.options.map((option, index) => (
                <Button
                  key={index}
                  onClick={() => handleOptionSelect(index)}
                  disabled={showFeedback}
                  variant={selectedOption === index ? "default" : "outline"}
                  className={`w-full text-left justify-start p-4 h-auto ${
                    selectedOption === index
                      ? option.correct
                        ? "bg-green-500 hover:bg-green-600 text-white border-green-600"
                        : "bg-red-500 hover:bg-red-600 text-white border-red-600"
                      : "border-amber-300 text-amber-700 hover:bg-amber-50"
                  }`}
                >
                  {option.text}
                </Button>
              ))}
            </div>
          </div>

          {showFeedback && (
            <div
              className={`mb-6 p-4 rounded-lg border ${
                currentItem.options[selectedOption!].correct
                  ? "bg-green-50 border-green-200"
                  : "bg-red-50 border-red-200"
              }`}
            >
              <p
                className={`font-medium ${
                  currentItem.options[selectedOption!].correct ? "text-green-800" : "text-red-800"
                }`}
              >
                {currentItem.options[selectedOption!].correct
                  ? currentItem.feedback.correct
                  : currentItem.feedback.incorrect}
              </p>
              <Button onClick={handleNext} className="mt-4 bg-amber-500 hover:bg-amber-600 text-white">
                {selectedOption != null && currentItem.options[selectedOption].correct
              
                  ? (isRetryRound && retryQueue.filter((item) => item.id !== currentItem.id).length === 0) ||
                    (!isRetryRound && currentIndex === currentItems.length - 1 && retryQueue.length === 0)
                    ? "Completar nivel"
                    : "Siguiente"
                  : "Intentar de nuevo"}
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="components/LevelComponent.tsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Heart, Lightbulb } from "lucide-react"
import { launchConfetti } from "@/lib/confetti"
import { UserData, pets, Pet } from "@/lib/userTypes"
import useSound from "@/hooks/useSound"

export default function LevelComponent({

  
  levelId,
  onComplete,
  onBack,
  userData,
  onLoseLife,
}: {
  levelId: number
  onComplete: (xp: number, coins: number) => void
  onBack: () => void
  userData: UserData
  onLoseLife: () => void
}) {
  
  // --- ESTADO PRINCIPAL ---
  // Pasadas: 'first' (primera vuelta) y 'retry' (revisi√≥n de falladas)
  const [pass, setPass] = useState<"first" | "retry">("first")
  const [currentIndex, setCurrentIndex] = useState(0)        // √≠ndice de la pasada actual
  const [retryQueue, setRetryQueue] = useState<number[]>([]) // √≠ndices de preguntas falladas
  const [retryPos, setRetryPos] = useState(0)                // puntero dentro de retryQueue
  // estado nuevo
  const [isFixing, setIsFixing] = useState(false)
  const playClick = useSound("/sounds/click.mp3")
  const playSuccess = useSound("/sounds/success.mp3")
  const playSuccess2 = useSound("/sounds/success2.mp3")
  const playFail = useSound("/sounds/fail.mp3")
const pets = [
  { id: "baby-capybara", name: "Capi Beb√©", icon: "üêπ", price: 0, unlocked: true },
  { id: "adult-capybara", name: "Capi Adulto", icon: "ü¶´", price: 200, unlocked: false },
  { id: "golden-capybara", name: "Capi Dorado", icon: "‚ú®ü¶´", price: 1000, unlocked: false },
  { id: "ninja-capybara", name: "Capi Ninja", icon: "ü•∑ü¶´", price: 1500, unlocked: false },
]

  const [score, setScore] = useState(0)
  const [selectedOption, setSelectedOption] = useState<number | null>(null)
  const [showFeedback, setShowFeedback] = useState(false)
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null)
  const [hintUsed, setHintUsed] = useState(false)
  // Level content data with complete content from the attachment
  const levelData = {
    1: {
      title: "Primeros Encuentros",
      type: "roleplay",
      duration: 8,
      xpReward: 50,
      coinReward: 20,
      background: "jungle-campfire-night-scene-animated.png",
      story:
        "Llegas a un campamento de capibaras exploradoras en medio de la selva. Es tu primer d√≠a y necesitas presentarte al grupo. Tu objetivo es causar una buena primera impresi√≥n.",
      hint: "Recuerda: una sonrisa genuina y mostrar inter√©s por los dem√°s son claves universales para conectar.",
      steps: [
        {
          situation: "¬øC√≥mo saludar√°s a una capibara desconocida que se acerca a ti?",
          options: [
            { text: "Con una sonrisa c√°lida y contacto visual directo", correct: true, points: 20 },
            { text: "Con un saludo r√°pido sin mirar mucho", correct: false, points: 0 },
            { text: "Esperando a que ella hable primero", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Excelente! El contacto visual y la sonrisa genuina transmiten confianza y apertura.",
            incorrect:
              "Una sonrisa c√°lida y contacto visual directo son fundamentales para una buena primera impresi√≥n.",
          },
        },
        {
          situation: "Durante la conversaci√≥n, ¬ømantienes contacto visual?",
          options: [
            { text: "S√≠, de manera natural y respetuosa", correct: true, points: 20 },
            { text: "No, me da pena mirar a los ojos", correct: false, points: 0 },
            { text: "Solo cuando hablo yo", correct: false, points: 5 },
          ],
          feedback: {
            correct: "Perfecto. El contacto visual muestra inter√©s genuino y construye confianza.",
            incorrect: "El contacto visual natural (no fijo) demuestra respeto e inter√©s por la otra persona.",
          },
        },
        {
          situation: "El interlocutor responde de manera t√≠mida. ¬øQu√© haces?",
          options: [
            { text: "Le doy espacio y hablo m√°s suave", correct: true, points: 20 },
            { text: "Trato de animarlo hablando m√°s fuerte", correct: false, points: 0 },
            { text: "Cambio de tema inmediatamente", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Muy bien! Adaptar tu energ√≠a a la del otro muestra inteligencia emocional.",
            incorrect: "Cuando alguien es t√≠mido, es mejor bajar la intensidad y darle espacio para abrirse.",
          },
        },
        {
          situation: "Una capibara te ofrece la mano para saludar. ¬øQu√© tipo de apret√≥n usas?",
          options: [
            { text: "Firme pero no excesivo, con contacto visual", correct: true, points: 20 },
            { text: "Muy suave, casi sin fuerza", correct: false, points: 0 },
            { text: "Muy fuerte para mostrar seguridad", correct: false, points: 0 },
          ],
          feedback: {
            correct: "Excelente. Un apret√≥n firme pero respetuoso transmite confianza sin intimidar.",
            incorrect: "Un apret√≥n de manos debe ser firme pero no excesivo, acompa√±ado de contacto visual.",
          },
        },
        {
          situation: "Te presentan al grupo. ¬øC√≥mo te presentas?",
          options: [
            { text: "Digo mi nombre y algo que me gusta hacer", correct: true, points: 20 },
            { text: "Solo digo mi nombre", correct: false, points: 5 },
            { text: "Hago una broma para romper el hielo", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Perfecto! Compartir un inter√©s personal ayuda a otros a conectar contigo.",
            incorrect: "Agregar algo personal (un inter√©s o pasi√≥n) ayuda a crear conexiones m√°s profundas.",
          },
        },
      ],
    },
    2: {
      title: "Escucha Activa",
      type: "interactive",
      duration: 6,
      xpReward: 40,
      coinReward: 15,
      background: "dense-jungle-sounds.png",
      story:
        "En el coraz√≥n de la selva, dos capibaras est√°n compartiendo sus experiencias. Tu misi√≥n es desarrollar tu habilidad de escucha activa prestando atenci√≥n a cada detalle.",
      hint: "La escucha activa no es solo o√≠r palabras, es entender emociones y necesidades detr√°s del mensaje.",
      steps: [
        {
          situation: "Una capibara habla de su d√≠a dif√≠cil. ¬øQu√© t√©cnica usar√≠as para demostrar que escuchas?",
          options: [
            { text: "Repetir palabras clave y asentir", correct: true, points: 20 },
            { text: "Interrumpir para dar consejos", correct: false, points: 0 },
            { text: "Cambiar el tema a algo positivo", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Excelente! Parafrasear y usar lenguaje corporal muestra que realmente escuchas.",
            incorrect: "Escuchar activamente significa reflejar lo que oyes sin interrumpir o juzgar.",
          },
        },
        {
          situation: "Escuchas a una capibara contar una historia emotiva. ¬øQu√© frase muestra mejor escucha?",
          options: [
            { text: "'Entiendo c√≥mo te sientes'", correct: true, points: 20 },
            { text: "'Lo mismo me pas√≥ a m√≠'", correct: false, points: 0 },
            { text: "'No te preocupes, no es tan grave'", correct: false, points: 0 },
          ],
          feedback: {
            correct: "Perfecto. Validar las emociones del otro es clave en la escucha activa.",
            incorrect: "Evita minimizar o hacer sobre ti. Enf√≥cate en validar sus sentimientos.",
          },
        },
        {
          situation: "Una capibara te cuenta 3 cosas importantes. ¬øEn qu√© orden de importancia las escuchaste?",
          options: [
            { text: "Su preocupaci√≥n por la familia, el trabajo, el clima", correct: true, points: 20 },
            { text: "El clima, el trabajo, la familia", correct: false, points: 0 },
            { text: "El trabajo, el clima, la familia", correct: false, points: 5 },
          ],
          feedback: {
            correct: "¬°Muy bien! Identificaste correctamente que la familia era su mayor preocupaci√≥n.",
            incorrect: "Escuchar activamente incluye identificar qu√© es m√°s importante para la otra persona.",
          },
        },
        {
          situation: "El interlocutor baja la voz mientras habla. ¬øQu√© haces?",
          options: [
            { text: "Me acerco ligeramente y mantengo atenci√≥n", correct: true, points: 20 },
            { text: "Ignoro el cambio de volumen", correct: false, points: 0 },
            { text: "Le pido que hable m√°s fuerte", correct: false, points: 0 },
          ],
          feedback: {
            correct: "Excelente. Adaptarte f√≠sicamente muestra respeto e inter√©s genuino.",
            incorrect: "Cuando alguien baja la voz, suele ser porque el tema es importante o personal.",
          },
        },
        {
          situation: "Una capibara te cuenta un problema personal. ¬øCu√°l es la mejor respuesta?",
          options: [
            { text: "'Debe ser dif√≠cil para ti. ¬øC√≥mo te sientes?'", correct: true, points: 20 },
            { text: "'Deber√≠as hacer esto...'", correct: false, points: 0 },
            { text: "'Al menos no es tan malo como...'", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Perfecto! Validar emociones y hacer preguntas abiertas profundiza la conexi√≥n.",
            incorrect: "Evita dar consejos inmediatos o comparar. Primero valida sus emociones.",
          },
        },
      ],
    },
    3: {
      title: "Lenguaje Corporal",
      type: "video",
      duration: 10,
      xpReward: 60,
      coinReward: 25,
      background: "natural-landscape-body-language.png",
      story:
        "En un claro del bosque, observas diferentes capibaras interactuando. Tu misi√≥n es interpretar y usar el lenguaje corporal efectivamente.",
      hint: "El cuerpo comunica m√°s que las palabras. Observa posturas, gestos y expresiones para entender el mensaje completo.",
      steps: [
        {
          situation: "Observas una capibara con brazos cruzados durante una conversaci√≥n. ¬øQu√© comunica?",
          options: [
            { text: "Posible resistencia o incomodidad", correct: true, points: 20 },
            { text: "Est√° relajada y c√≥moda", correct: false, points: 0 },
            { text: "Tiene fr√≠o solamente", correct: false, points: 5 },
          ],
          feedback: {
            correct: "¬°Correcto! Los brazos cruzados suelen indicar una barrera emocional o f√≠sica.",
            incorrect: "Los brazos cruzados generalmente indican resistencia, defensa o incomodidad.",
          },
        },
        {
          situation: "Ves una sonrisa natural vs una forzada. ¬øC√≥mo las diferencias?",
          options: [
            { text: "La natural involucra los ojos, la forzada solo la boca", correct: true, points: 20 },
            { text: "La natural es m√°s grande", correct: false, points: 0 },
            { text: "No hay diferencia real", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Excelente! Una sonrisa genuina activa los m√∫sculos alrededor de los ojos.",
            incorrect: "Las sonrisas genuinas involucran toda la cara, especialmente los ojos (sonrisa Duchenne).",
          },
        },
        {
          situation: "¬øQu√© postura corporal muestra m√°s seguridad y apertura?",
          options: [
            { text: "Espalda recta, hombros relajados, brazos abiertos", correct: true, points: 20 },
            { text: "Encorvado con manos en los bolsillos", correct: false, points: 0 },
            { text: "R√≠gido con brazos a los lados", correct: false, points: 5 },
          ],
          feedback: {
            correct: "¬°Perfecto! Esta postura transmite confianza sin intimidar.",
            incorrect: "Una postura abierta y relajada transmite confianza y accesibilidad.",
          },
        },
        {
          situation: "Durante una presentaci√≥n, ¬øqu√© hacer con las manos?",
          options: [
            { text: "Usarlas para acompa√±ar y enfatizar el mensaje", correct: true, points: 20 },
            { text: "Mantenerlas ocultas o quietas", correct: false, points: 0 },
            { text: "Cruzarlas para verse profesional", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Muy bien! Los gestos naturales con las manos refuerzan tu mensaje.",
            incorrect: "Las manos son herramientas poderosas para comunicar. √ösalas de manera natural.",
          },
        },
        {
          situation: "¬øCu√°ntos segundos es ideal mantener contacto visual en una conversaci√≥n?",
          options: [
            { text: "3-5 segundos, luego desviar naturalmente", correct: true, points: 20 },
            { text: "Todo el tiempo sin parar", correct: false, points: 0 },
            { text: "Solo cuando hablas t√∫", correct: false, points: 5 },
          ],
          feedback: {
            correct: "¬°Correcto! El contacto visual natural evita intimidar pero mantiene conexi√≥n.",
            incorrect: "El contacto visual debe ser natural: 3-5 segundos, luego desviar brevemente.",
          },
        },
      ],
    },
    4: {
      title: "Manejo de Conflictos",
      type: "story",
      duration: 12,
      xpReward: 80,
      coinReward: 30,
      background: "conflict-resolution-scene.png",
      story:
        "Dos capibaras est√°n en desacuerdo sobre qu√© ruta tomar para llegar al r√≠o. La tensi√≥n est√° aumentando y necesitas mediar para resolver el conflicto.",
      hint: "En conflictos, busca primero entender antes de ser entendido. La empat√≠a desarma la tensi√≥n.",
      steps: [
        {
          situation: "Dos capibaras discuten por un recurso limitado. ¬øQu√© haces primero?",
          options: [
            { text: "Escucho a ambas partes por separado", correct: true, points: 20 },
            { text: "Tomo una decisi√≥n r√°pida", correct: false, points: 0 },
            { text: "Les digo que se calmen", correct: false, points: 5 },
          ],
          feedback: {
            correct: "¬°Excelente! Entender todas las perspectivas es el primer paso para resolver conflictos.",
            incorrect: "Antes de resolver, necesitas entender completamente el problema desde todas las perspectivas.",
          },
        },
        {
          situation: "Una parte est√° muy alterada emocionalmente. ¬øQu√© tono de voz usar√≠as?",
          options: [
            { text: "Calmado y pausado, m√°s bajo que el suyo", correct: true, points: 20 },
            { text: "Firme y autoritario", correct: false, points: 0 },
            { text: "Al mismo nivel de intensidad", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Perfecto! Un tono calmado ayuda a reducir la tensi√≥n emocional.",
            incorrect: "Bajar el tono y hablar pausadamente ayuda a calmar la situaci√≥n.",
          },
        },
        {
          situation: "La tensi√≥n sube entre las partes. ¬øQu√© haces?",
          options: [
            { text: "Hago una pausa y respiro profundo", correct: true, points: 20 },
            { text: "Acelero para resolver r√°pido", correct: false, points: 0 },
            { text: "Dejo que se desahoguen", correct: false, points: 5 },
          ],
          feedback: {
            correct: "¬°Muy bien! Las pausas estrat√©gicas permiten que las emociones se calmen.",
            incorrect: "Cuando la tensi√≥n sube, una pausa estrat√©gica puede cambiar toda la din√°mica.",
          },
        },
        {
          situation: "Buscas una soluci√≥n. ¬øEn qu√© te enfocas?",
          options: [
            { text: "En puntos en com√∫n e intereses compartidos", correct: true, points: 20 },
            { text: "En qui√©n tiene la raz√≥n", correct: false, points: 0 },
            { text: "En las diferencias para resolverlas", correct: false, points: 5 },
          ],
          feedback: {
            correct: "¬°Excelente! Los puntos en com√∫n son la base para construir soluciones.",
            incorrect: "Enf√≥cate en lo que une, no en lo que divide. Los intereses comunes son clave.",
          },
        },
        {
          situation: "Una parte no quiere hablar m√°s. ¬øQu√© haces?",
          options: [
            { text: "Respeto su espacio y propongo retomar despu√©s", correct: true, points: 20 },
            { text: "Insisto en que debe participar", correct: false, points: 0 },
            { text: "Resuelvo sin su opini√≥n", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Perfecto! Respetar los l√≠mites mantiene la confianza y abre futuras oportunidades.",
            incorrect: "Forzar la participaci√≥n puede empeorar el conflicto. Respeta los l√≠mites.",
          },
        },
      ],
    },
    5: {
      title: "Presentaciones Efectivas",
      type: "quiz",
      duration: 15,
      xpReward: 100,
      coinReward: 40,
      background: "presentation-stage-natural.png",
      story:
        "Es tu turno de presentar un proyecto importante al consejo de capibaras ancianas. Debes demostrar todas tus habilidades de comunicaci√≥n para ser claro, convincente y memorable.",
      hint: "Una gran presentaci√≥n cuenta una historia clara: problema, soluci√≥n, beneficios. Conecta emocionalmente con tu audiencia.",
      steps: [
        {
          situation: "¬øCu√°l es la mejor manera de iniciar tu presentaci√≥n?",
          options: [
            { text: "Con una historia breve relacionada al tema", correct: true, points: 20 },
            { text: "Con estad√≠sticas y datos duros", correct: false, points: 5 },
            { text: "Disculp√°ndome por posibles errores", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Excelente! Las historias capturan atenci√≥n y crean conexi√≥n emocional inmediata.",
            incorrect: "Las historias conectan emocionalmente desde el inicio y hacen tu mensaje memorable.",
          },
        },
        {
          situation: "¬øCu√°nto tiempo m√°ximo deber√≠as usar para la introducci√≥n?",
          options: [
            { text: "1-2 minutos m√°ximo", correct: true, points: 20 },
            { text: "5 minutos para dar contexto completo", correct: false, points: 0 },
            { text: "30 segundos, directo al grano", correct: false, points: 5 },
          ],
          feedback: {
            correct: "¬°Correcto! Una introducci√≥n concisa mantiene la atenci√≥n y genera expectativa.",
            incorrect: "La introducci√≥n debe ser breve pero suficiente para enganchar y contextualizar.",
          },
        },
        {
          situation: "Notas que el p√∫blico se distrae. ¬øQu√© haces?",
          options: [
            { text: "Hago una pregunta directa o cambio el ritmo", correct: true, points: 20 },
            { text: "Contin√∫o como si nada pasara", correct: false, points: 0 },
            { text: "Hablo m√°s fuerte para captar atenci√≥n", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Muy bien! Involucrar activamente al p√∫blico recupera su atenci√≥n.",
            incorrect: "Cuando pierdes atenci√≥n, involucra al p√∫blico con preguntas o cambios de ritmo.",
          },
        },
        {
          situation: "Olvidas parte de tu discurso. ¬øQu√© haces?",
          options: [
            { text: "Respiro, hago una pausa y retomo naturalmente", correct: true, points: 20 },
            { text: "Me disculpo y admito que olvid√©", correct: false, points: 0 },
            { text: "Improviso algo completamente diferente", correct: false, points: 5 },
          ],
          feedback: {
            correct: "¬°Perfecto! La confianza y naturalidad mantienen la credibilidad.",
            incorrect: "Las pausas naturales y retomar con confianza mantienen tu credibilidad intacta.",
          },
        },
        {
          situation: "Para el cierre de tu presentaci√≥n, ¬øqu√© es m√°s efectivo?",
          options: [
            { text: "Resumir puntos clave y hacer un llamado a la acci√≥n", correct: true, points: 20 },
            { text: "Agradecer y terminar abruptamente", correct: false, points: 5 },
            { text: "Presumir sobre tu trabajo", correct: false, points: 0 },
          ],
          feedback: {
            correct: "¬°Excelente! Un cierre fuerte refuerza tu mensaje y motiva a la acci√≥n.",
            incorrect: "El cierre debe reforzar tu mensaje principal y motivar a la audiencia a actuar.",
          },
        },
      ],
    },
  }

  const currentLevelData = levelData[levelId as keyof typeof levelData]
  const currentPet = pets.find((p) => p.id === userData.currentPet)

  if (!currentLevelData) {
    return (
      <div className="max-w-4xl mx-auto p-6 text-center">
        <h2 className="text-2xl font-bold mb-4">Nivel en Desarrollo</h2>
        <p className="text-muted-foreground mb-4">Este nivel estar√° disponible pronto.</p>
        <Button onClick={onBack}>Volver al curso</Button>
      </div>
    )
  }

  // Normalizamos: todo lo que no sea 'roleplay' lo tratamos como 'quiz'
  const levelKind: "roleplay" | "quiz" = currentLevelData.type === "roleplay" ? "roleplay" : "quiz"

  // Resolvemos qu√© √≠ndice de paso mostrar seg√∫n la pasada
  const stepIndex = pass === "first" ? currentIndex : retryQueue[retryPos]
  const currentStepData = currentLevelData.steps[stepIndex]

  const pushWrongOnce = (idx: number) => {
    setRetryQueue((prev) => (prev.includes(idx) ? prev : [...prev, idx]))
  }

  const resetForNext = () => {
    setIsFixing(false)
    setSelectedOption(null)
    setShowFeedback(false)
    setIsCorrect(null)
    setHintUsed(false)
  }

  const handleOptionSelect = (optionIndex: number) => {
     
    setSelectedOption(optionIndex)
    const option = currentStepData.options[optionIndex]

    if (levelKind === "roleplay") {
      // Roleplay: reintento inmediato hasta acertar
      if (option.correct) {
        playSuccess2()
        setScore((s) => s + option.points)
        setIsCorrect(true)
        setIsFixing(false)
      } else {
        playFail()
        setIsCorrect(false)
        onLoseLife()
        setIsFixing(true)   // ‚Üê estamos corrigiendo esta misma
      }
      setShowFeedback(true)
      return
    }

    // Quiz: si fallas, se agenda para el final; igual mostramos feedback
    if (option.correct) {
      playSuccess2()
      setScore((s) => s + option.points)
      setIsCorrect(true)
    } else {
      playFail()
      pushWrongOnce(stepIndex)
      setIsCorrect(false)
      onLoseLife()
    }
    setShowFeedback(true)
  }

  const goToNextInFirstPass = () => {
    if (currentIndex < currentLevelData.steps.length - 1) {
      setCurrentIndex((i) => i + 1)
      resetForNext()
    } else {
      // Termin√≥ primera pasada
      if (retryQueue.length > 0) {
        setPass("retry")
        setRetryPos(0)
        resetForNext()
      } else {
        playSuccess() // sonido de √©xito al completar
      launchConfetti() // üéâ confetti
        onComplete(currentLevelData.xpReward, currentLevelData.coinReward)
      }
    }
  }

  const goToNextInRetryPass = () => {
    if (retryPos < retryQueue.length - 1) {
      setRetryPos((p) => p + 1)
      resetForNext()
    } else {
      playSuccess() // sonido de √©xito al completar
  launchConfetti() // üéâ confetti
      onComplete(currentLevelData.xpReward, currentLevelData.coinReward)
    }
  }

  const handleNext = () => {
    if (levelKind === "roleplay") {
      // Roleplay: solo avanzamos si acert√≥; si fall√≥, reintenta en el acto
      if (isCorrect) {
        if (pass === "first") {
          goToNextInFirstPass()
        } else {
          // En retry de roleplay (poco com√∫n), tambi√©n avanzamos s√≥lo si acert√≥
          goToNextInRetryPass()
        }
      } else {
        // reintento inmediato
        resetForNext()
      }
      return
    }

    // Quiz:
    if (pass === "first") {
      // En la primera pasada SIEMPRE avanzamos (haya sido correcto o no)
      goToNextInFirstPass()
    } else {
      // En la pasada de retry, nos quedamos en la misma hasta que acierte
      if (isCorrect) {
        goToNextInRetryPass()
      } else {
        // reintenta esta misma fallada
        resetForNext()
      }
    }
  }

  const showHint = () => {
    if (!hintUsed) setHintUsed(true)
  }

  return (
    <div className="max-w-4xl mx-auto">
      {/* Level header */}
      <div className="flex items-center gap-4 mb-6">
        <Button variant="outline" onClick={onBack} className="border-amber-300 text-amber-700 bg-transparent">
          ‚Üê Volver al curso
        </Button>
        <h1 className="text-2xl font-bold text-amber-800">{currentLevelData.title}</h1>
        <div className="text-3xl animate-bounce">{currentPet?.icon}</div>
        <div className="flex items-center gap-2 ml-auto">
          <Heart className="w-5 h-5 text-red-500" />
          <span className="font-bold text-red-600">
            {userData.lives}/{userData.maxLives}
          </span>
        </div>
      </div>

      {/* Level content */}
      <Card className="relative overflow-hidden">
        <div
          className="absolute inset-0 opacity-20"
          style={{
            backgroundImage: `url('/${currentLevelData.background}')`,
            backgroundSize: "cover",
            backgroundPosition: "center",
          }}
        />

        <CardContent className="p-8 relative z-10">
          {/* Progress */}
          <div className="mb-6">
            <div className="flex justify-between text-sm text-amber-700 mb-2">
              <span>Progreso</span>
              <span>
                {pass === "retry"
                  ? "Repitiendo preguntas"
                  : `${stepIndex + 1} de ${currentLevelData.steps.length}${retryQueue.length > 0 ? ` (${retryQueue.length} por repetir)` : ""
                  }`}
              </span>
            </div>
            <Progress value={((stepIndex + 1) / currentLevelData.steps.length) * 100} />
          </div>

          {/* Story intro (only on first step) */}
          {stepIndex === 0 && (
            <div className="mb-6 p-4 bg-amber-50 rounded-lg border border-amber-200">
              <p className="text-amber-800">{currentLevelData.story}</p>
            </div>
          )}

          {/* Pet hint section - separate from feedback */}
          <div className="mb-6 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="text-4xl">{currentPet?.icon}</div>
              <div>
                <p className="text-sm text-amber-600 font-medium">{currentPet?.name} est√° aqu√≠ para ayudarte</p>
                {!hintUsed && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={showHint}
                    className="mt-1 border-amber-300 hover:bg-amber-50 text-white bg-amber-700"
                  >
                    üí° Pedir pista (1 por nivel)
                  </Button>
                )}
              </div>
            </div>
            {hintUsed && (
              <div className="max-w-md p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-start gap-2">
                  <div className="text-lg">{currentPet?.icon}</div>
                  <div>
                    <p className="text-sm font-medium text-blue-800">Pista de {currentPet?.name}:</p>
                    <p className="text-sm text-blue-700">{currentLevelData.hint}</p>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Current situation */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3 text-amber-800">Situaci√≥n:</h3>
            <p className="text-amber-700 bg-white/80 p-4 rounded-lg">{currentStepData.situation}</p>
          </div>

          {/* Options */}
          {!showFeedback && (
            <div className="space-y-3">
              <h4 className="font-semibold text-amber-800">¬øQu√© har√≠as?</h4>
              {currentStepData.options.map((option, index) => (
                <Button
                  key={index}
                  variant="outline"
                  className="w-full text-left justify-start p-4 h-auto border-amber-200 hover:bg-amber-50 text-white bg-amber-700"
                  disableClickSound
                  onClick={() => handleOptionSelect(index)}
                >
                  {option.text}
                </Button>
              ))}
            </div>
          )}

          {showFeedback && (
            <div className="mt-4">
              <div
                className={`p-4 rounded-lg border-2 ${isCorrect ? "bg-green-500/20 border-green-400/50" : "bg-red-500/20 border-red-400/50"
                  }`}
              >
                <div className="flex items-center gap-2 mb-2">
                  <div className={`text-2xl ${isCorrect ? "animate-bounce" : ""}`}>{isCorrect ? "‚úÖ" : "‚ùå"}</div>
                  <span className={`font-semibold ${isCorrect ? "text-green-800" : "text-red-800"}`}>
                    {isCorrect ? "¬°Correcto!" : "Incorrecto"}
                  </span>
                  {!isCorrect && <span className="text-red-600 text-sm">(-1 vida)</span>}
                </div>
                <p className={isCorrect ? "text-green-800" : "text-red-800"}>
                  {isCorrect ? currentStepData.feedback.correct : currentStepData.feedback.incorrect}
                </p>
              </div>

              <div className="flex justify-between items-center">
                <div className="text-sm text-amber-600">
                  Puntos ganados: +{currentStepData.options[selectedOption!].points}
                </div>
                <Button
                
                  onClick={handleNext}
                  className={`mt-2 px-6 py-2 text-white font-semibold rounded-lg ${isCorrect
                    ? "bg-green-500 hover:bg-green-600"
                    : "bg-red-500 hover:bg-red-600"
                    }`}
                >
                  {isCorrect
                    ? (pass === "first"
                      ? (stepIndex < currentLevelData.steps.length - 1
                        ? "Siguiente"
                        : (retryQueue.length > 0 ? "Repasar falladas" : "Completar nivel"))
                      : (retryPos < retryQueue.length - 1 ? "Siguiente (repaso)" : "Completar nivel"))
                    : "Reintentar"}
                </Button>


              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="components/LoginButton.tsx">
"use client"

import { signInWithPopup, signOut } from "firebase/auth"
import { auth, googleProvider } from "@/lib/firebase"
import { Button } from "@/components/ui/button"
import { LogIn, LogOut } from "lucide-react"
import { useState } from "react"
import { useAuth } from "./AuthProvider"

export default function LoginButton() {
  
    const { user } = useAuth()
    const [loading, setLoading] = useState(false)

    const handleLogin = async () => {
        try {
            setLoading(true)
            await signInWithPopup(auth, googleProvider)
        } finally {
            setLoading(false)
        }
    }

    const handleLogout = async () => {
        try {
            setLoading(true)
            await signOut(auth)
        } finally {
            setLoading(false)
        }
    }

    if (user) {
        return (
  <Button
    onClick= {handleLogin}
    disabled={loading}
    variant="outline"
    className="flex-1 border-amber-300 text-amber-700 text-lg px-8 py-4 rounded-xl shadow-md flex items-center justify-center gap-3"
  >
    <LogIn className="w-6 h-6" />
    Iniciar Sesi√≥n con Google
  </Button>
)
    }

    return (
  <Button
    onClick={handleLogin}
    disabled={loading}
    variant="outline"
    className="flex-1 border-amber-300 text-amber-700 text-lg px-8 py-4 rounded-xl shadow-md flex items-center justify-center gap-3"
  >
    <LogIn className="w-6 h-6" />
    Iniciar Sesi√≥n con Google
  </Button>
)
}
</file>

<file path="components/QuizLevel.tsx">
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Star, ArrowLeft, Brain, Target } from "lucide-react"
import { levelBackgrounds } from "@/lib/levelBackgrounds"

interface QuizQuestion {
  id: number
  question: string
  options: string[]
  correctAnswer: number
  explanation: string
  points: number
  category: string
}

interface QuizLevelProps {
  levelId: number
  world: "selva" | "montana" | "rio" | "mercado" | "ciudad"
  xpReward: number
  coinReward: number
  onComplete: (xp: number, coins: number) => void
  onBack: () => void
  userData: UserData
  onLoseLife: () => void
}

const quizQuestions: QuizQuestion[] = [
  {
    id: 1,
    question: "¬øCu√°l es el principio m√°s importante para establecer rapport en una primera conversaci√≥n?",
    options: [
      "Hablar sobre tus logros profesionales",
      "Encontrar puntos en com√∫n y mostrar inter√©s genuino",
      "Hacer preguntas directas sobre el trabajo",
      "Mantener una postura dominante",
    ],
    correctAnswer: 1,
    explanation:
      "El rapport se construye encontrando conexiones genuinas y mostrando inter√©s real en la otra persona. Esto activa el principio de simpat√≠a de Cialdini.",
    points: 20,
    category: "Construcci√≥n de Rapport",
  },
  {
    id: 2,
    question: "Cuando alguien comparte un problema contigo, ¬øcu√°l es la mejor respuesta inicial?",
    options: [
      "Ofrecer una soluci√≥n inmediata",
      "Cambiar de tema para aliviar la tensi√≥n",
      "Validar sus sentimientos y hacer preguntas para entender mejor",
      "Contar una experiencia similar tuya",
    ],
    correctAnswer: 2,
    explanation:
      "La escucha activa requiere primero validar los sentimientos de la persona y buscar entender completamente antes de ofrecer soluciones.",
    points: 25,
    category: "Escucha Activa",
  },
  {
    id: 3,
    question: "¬øQu√© porcentaje de la comunicaci√≥n se transmite a trav√©s del lenguaje corporal?",
    options: ["25%", "40%", "55%", "70%"],
    correctAnswer: 2,
    explanation:
      "Seg√∫n Albert Mehrabian, el 55% de la comunicaci√≥n es lenguaje corporal, 38% tono de voz y solo 7% palabras. El lenguaje no verbal es crucial.",
    points: 15,
    category: "Comunicaci√≥n No Verbal",
  },
  {
    id: 4,
    question: "En una situaci√≥n de conflicto, ¬øcu√°l es la estrategia m√°s efectiva?",
    options: [
      "Defender tu posici√≥n firmemente",
      "Evitar el conflicto completamente",
      "Buscar entender la perspectiva del otro antes de responder",
      "Usar tu autoridad para resolver r√°pidamente",
    ],
    correctAnswer: 2,
    explanation:
      "La resoluci√≥n efectiva de conflictos comienza con la comprensi√≥n emp√°tica. Esto reduce la defensividad y abre espacio para soluciones colaborativas.",
    points: 30,
    category: "Resoluci√≥n de Conflictos",
  },
  {
    id: 5,
    question: "¬øCu√°l es la t√©cnica m√°s efectiva para dar feedback constructivo?",
    options: [
      "Sandwich: positivo-negativo-positivo",
      "Ser directo y honesto sin rodeos",
      "SBI: Situaci√≥n-Comportamiento-Impacto + pregunta abierta",
      "Esperar a la evaluaci√≥n anual",
    ],
    correctAnswer: 2,
    explanation:
      "El modelo SBI (Situaci√≥n-Comportamiento-Impacto) es m√°s efectivo porque es espec√≠fico, observable y se enfoca en comportamientos modificables, no en la persona.",
    points: 25,
    category: "Feedback Efectivo",
  },
  {
    id: 6,
    question: "¬øQu√© hace que una presentaci√≥n sea m√°s persuasiva?",
    options: [
      "Muchos datos y estad√≠sticas",
      "Historias que conecten emocionalmente + datos de apoyo",
      "Hablar r√°pido para cubrir m√°s contenido",
      "Usar jerga t√©cnica para mostrar expertise",
    ],
    correctAnswer: 1,
    explanation:
      "Las historias activan m√∫ltiples √°reas del cerebro y crean conexi√≥n emocional, mientras que los datos proporcionan respaldo l√≥gico. La combinaci√≥n es poderosa.",
    points: 20,
    category: "Presentaciones",
  },
]

export default function QuizLevel({ levelId, world, onComplete, onBack }: QuizLevelProps) {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [showResult, setShowResult] = useState(false)
  const [score, setScore] = useState(0)
  const [correctAnswers, setCorrectAnswers] = useState(0)
  const [answers, setAnswers] = useState<number[]>([])
  const [retryQueue, setRetryQueue] = useState<number[]>([])
  const [wrongQueue, setWrongQueue] = useState<number[]>([])
  const [mode, setMode] = useState<"first" | "review">("first")
  const [reviewPos, setReviewPos] = useState(0)

  const backgroundImage = levelBackgrounds[world] || levelBackgrounds["selva"]

  const getIndex = () => (mode === "first" ? currentQuestion : wrongQueue[reviewPos])
  const question = quizQuestions[getIndex()]
  const isLastInFirstPass = currentQuestion === quizQuestions.length - 1
  const isLastQuestion =
    mode === "first"
      ? currentQuestion === quizQuestions.length - 1
      : reviewPos === wrongQueue.length - 1

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex)
  }

  const handleNextQuestion = () => {
    if (selectedAnswer === null) return
    const isCorrect = selectedAnswer === question.correctAnswer

    if (isCorrect) {
      setScore((s) => s + question.points)
      setCorrectAnswers((c) => c + 1)
    } else if (mode === "first") {
      setWrongQueue((prev) => (prev.includes(getIndex()) ? prev : [...prev, getIndex()]))
    }

    setShowResult(true)

    setTimeout(() => {
      if (mode === "first") {
        if (isLastInFirstPass) {
          if (wrongQueue.length > 0 || !isCorrect) {
            const finalQueue = isCorrect ? wrongQueue : [...wrongQueue, getIndex()]
            setWrongQueue(Array.from(new Set(finalQueue)))
            setMode("review")
            setReviewPos(0)
            setSelectedAnswer(null)
            setShowResult(false)
          } else {
            const finalScore = isCorrect ? score + question.points : score
            const badges: string[] = []
            if (correctAnswers + (isCorrect ? 1 : 0) === quizQuestions.length) badges.push("Perfeccionista")
            if (finalScore >= 120) badges.push("Experto en Comunicaci√≥n")
            if (correctAnswers + (isCorrect ? 1 : 0) >= 5) badges.push("Conocedor")
            onComplete(props.xpReward, props.coinReward)

          }
        } else {
          setCurrentQuestion((q) => q + 1)
          setSelectedAnswer(null)
          setShowResult(false)
        }
      } else {
        if (isCorrect) {
          if (reviewPos < wrongQueue.length - 1) {
            setReviewPos((p) => p + 1)
            setSelectedAnswer(null)
            setShowResult(false)
          } else {
            const finalScore = score + question.points
            const badges: string[] = []
            if (correctAnswers + 1 === quizQuestions.length) badges.push("Perfeccionista")
            if (finalScore >= 120) badges.push("Experto en Comunicaci√≥n")
            if (correctAnswers + 1 >= 5) badges.push("Conocedor")
            onComplete(props.xpReward, props.coinReward)

          }
        } else {
          setSelectedAnswer(null)
          setShowResult(false)
        }
      }
    }, 1200)
  }

  const getScorePercentage = () => {
    const maxScore = quizQuestions.reduce((sum, q) => sum + q.points, 0)
    return Math.round((score / maxScore) * 100)
  }

  if (showResult) {
    const isCorrect = selectedAnswer === question.correctAnswer
    return (
      <div
        className="min-h-screen bg-cover bg-center bg-no-repeat flex items-center justify-center"
        style={{ backgroundImage: `url(${backgroundImage})` }}
      >
        <div className="absolute inset-0 bg-black/30"></div>
        <div className="relative z-10 w-full max-w-2xl p-4">
          <Card className="w-full animate-bounce-in">
            <CardContent className="p-8 text-center">
              <div className="text-6xl mb-4">{isCorrect ? "‚úÖ" : "‚ùå"}</div>
              <h3 className="text-2xl font-bold mb-4">{isCorrect ? "¬°Correcto!" : "Incorrecto"}</h3>

              {isCorrect && (
                <div className="bg-green-100 rounded-lg p-4 mb-4">
                  <p className="text-lg font-semibold text-green-700 mb-2">+{question.points} puntos</p>
                  <Badge className="bg-green-500">{question.category}</Badge>
                </div>
              )}

              <div className="bg-muted/50 rounded-lg p-4 mb-4 text-left">
                <p className="font-semibold mb-2">Explicaci√≥n:</p>
                <p className="text-muted-foreground">{question.explanation}</p>
                {!isCorrect && (
                  <p className="text-sm text-primary mt-2">
                    Respuesta correcta: {question.options[question.correctAnswer]}
                  </p>
                )}
              </div>

              <div className="flex items-center justify-center gap-2">
                <Star className="w-5 h-5 text-yellow-500" />
                <span className="font-bold">
                  Puntuaci√≥n: {score} ({getScorePercentage()}%)
                </span>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  return (
    <div
      className="min-h-screen bg-cover bg-center bg-no-repeat relative"
      style={{ backgroundImage: `url(${backgroundImage})` }}
    >
      <div className="absolute inset-0 bg-black/30"></div>

      <div className="relative z-10 max-w-4xl mx-auto py-8 space-y-6">
        {/* Header */}
        <Card className="bg-gradient-to-r from-indigo-500 to-cyan-500 text-white border-0">
          <CardHeader>
            <div className="flex items-center justify-between">
              <Button variant="ghost" onClick={onBack} className="text-white hover:bg-white/20">
                <ArrowLeft className="w-4 h-4 mr-2" />
                Salir
              </Button>
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <Brain className="w-5 h-5" />
                  <span className="font-bold">Quiz de Comunicaci√≥n</span>
                </div>
                <div className="flex items-center gap-2">
                  <Star className="w-5 h-5 text-yellow-300" />
                  <span className="font-bold text-lg">{score}</span>
                </div>
              </div>
            </div>
            <Progress value={((currentQuestion + 1) / quizQuestions.length) * 100} className="bg-white/20" />
            <p className="text-sm text-white/80">
              Pregunta {currentQuestion + 1} de {quizQuestions.length}
            </p>
          </CardHeader>
        </Card>

        {/* Question */}
        <Card className="overflow-hidden">
          <CardHeader className="bg-gradient-to-r from-indigo-500/10 to-cyan-500/10">
            <div className="flex items-center gap-3 mb-2">
              <Target className="w-6 h-6 text-primary" />
              <Badge variant="outline">{question.category}</Badge>
              <Badge variant="secondary">{question.points} pts</Badge>
            </div>
            <CardTitle className="text-xl leading-relaxed">{question.question}</CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="space-y-3 mb-8">
              {question.options.map((option, index) => (
                <Button
                  key={index}
                  onClick={() => handleAnswerSelect(index)}
                  variant={selectedAnswer === index ? "default" : "outline"}
                  className={`w-full p-4 h-auto text-left justify-start transition-all duration-200 ${
                    selectedAnswer === index
                      ? "bg-primary text-primary-foreground"
                      : "hover:bg-primary/5 hover:border-primary/50"
                  }`}
                >
                  <div className="flex items-center gap-4">
                    <div
                      className={`w-8 h-8 rounded-full border-2 flex items-center justify-center font-bold ${
                        selectedAnswer === index
                          ? "border-primary-foreground text-primary-foreground"
                          : "border-primary text-primary"
                      }`}
                    >
                      {String.fromCharCode(65 + index)}
                    </div>
                    <span>{option}</span>
                  </div>
                </Button>
              ))}
            </div>

            <div className="flex justify-between items-center">
              <div className="text-sm text-muted-foreground">
                {correctAnswers} respuestas correctas de {currentQuestion}
              </div>
              <Button
                onClick={handleNextQuestion}
                disabled={selectedAnswer === null}
                className="bg-primary hover:bg-primary/90"
              >
                {isLastQuestion ? "Finalizar Quiz" : "Siguiente Pregunta"}
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Progress Summary */}
        <Card className="bg-muted/30">
          <CardContent className="p-4">
            <div className="flex items-center justify-between text-sm">
              <span>Progreso del Quiz</span>
              <span className="font-semibold">
                {Math.round(((currentQuestion + 1) / quizQuestions.length) * 100)}%
              </span>
            </div>
            <Progress value={((currentQuestion + 1) / quizQuestions.length) * 100} className="mt-2" />
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
</file>

<file path="package.json">
{
  "name": "nu9ve-v5",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@vercel/analytics": "^1.5.0",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "firebase": "^12.2.1",
    "geist": "^1.4.2",
    "lucide-react": "^0.542.0",
    "next": "^15.2.4",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/canvas-confetti": "^1.9.0",
    "@types/node": "^20.19.13",
    "@types/react": "^19.1.12",
    "@types/react-dom": "^19",
    "@types/react-icons": "^2.2.7",
    "eslint": "^9.35.0",
    "eslint-config-next": "^15.2.4",
    "tailwindcss": "^4.1.12",
    "tw-animate-css": "^1.3.8",
    "typescript": "^5.9.2"
  }
}
</file>

<file path="app/page.tsx">
"use client"
import CourseList from "@/components/CourseList"
import { UserData, pets, Pet } from "@/lib/userTypes"
import LevelComponent from "@/components/LevelComponent"
import RoleplayLevel from "@/components/RoleplayLevel"
import QuizLevel from "@/components/QuizLevel"
import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import LoginButton from "@/components/LoginButton"
import Dashboard from "@/components/Dashboard"
import { Level } from "@/lib/userTypes"


import {
  Trophy,
  Heart,
  Award,
  Coins,
  Gem,
  ShoppingBag,
  Map,
  User,
  Play,
  Lock,
  CheckCircle,
  Sparkles,
  Volume2,
  Eye,
  MessageCircle,
  Users,
  Presentation,
  LogIn,
  UserPlus,
  ChevronLeft,
  ChevronRight,
} from "lucide-react"



interface Course {
  id: string
  title: string
  description: string
  icon: string
  color: string
  totalLevels: number
  unlockedLevels: number
  completedLevels: number
}



const initialUserData: UserData = {
  level: 1,
  xp: 0,
  coins: 100,
  gems: 5,
  lives: 5,
  maxLives: 5,
  lastDailyChest: null,
  completedLevels: [],
  badges: [],
  currentPet: "baby-capybara",
  unlockedPets: ["baby-capybara"],
}

const courses: Course[] = [
  {
    id: "communication-v1",
    title: "Comunicaci√≥n Efectiva",
    description: "Domina el arte de comunicarte con confianza y empat√≠a",
    icon: "üí¨",
    color: "from-amber-400 to-orange-500",
    totalLevels: 12,
    unlockedLevels: 3,
    completedLevels: 0,
  },
  {
    id: "communication-v2",
    title: "Comunicaci√≥n Efectiva v2",
    description: "Versi√≥n avanzada con nuevos escenarios y desaf√≠os",
    icon: "üó£Ô∏è",
    color: "from-orange-500 to-red-500",
    totalLevels: 12,
    unlockedLevels: 1,
    completedLevels: 0,
  },
  {
    id: "communication-v3",
    title: "Comunicaci√≥n Efectiva v3",
    description: "Edici√≥n especial con casos de estudio empresariales",
    icon: "üì¢",
    color: "from-yellow-400 to-amber-500",
    totalLevels: 12,
    unlockedLevels: 1,
    completedLevels: 0,
  },
  {
    id: "communication-v4",
    title: "Comunicaci√≥n v4",
    description: "T√©cnicas avanzadas de persuasi√≥n y liderazgo",
    icon: "üéØ",
    color: "from-amber-500 to-yellow-600",
    totalLevels: 12,
    unlockedLevels: 1,
    completedLevels: 0,
  },
  {
    id: "communication-premium",
    title: "Comunicaci√≥n Premium",
    description: "Masterclass exclusiva con casos reales de √©xito",
    icon: "üëë",
    color: "from-yellow-600 to-orange-700",
    totalLevels: 12,
    unlockedLevels: 1,
    completedLevels: 0,
  },
]

const communicationLevels: Level[] = [
  {
    id: 1,
    title: "Primeros Encuentros",
    type: "roleplay",
    duration: 8,
    xpReward: 50,
    coinReward: 20,
    isCompleted: false,
    isUnlocked: true,
    world: "selva",
  },
  {
    id: 2,
    title: "Escucha Activa",
    type: "quiz",
    duration: 6,
    xpReward: 40,
    coinReward: 15,
    isCompleted: false,
    isUnlocked: true,
    world: "montana",
  },
  {
    id: 3,
    title: "quiz",
    type: "video",
    duration: 10,
    xpReward: 60,
    coinReward: 25,
    isCompleted: false,
    isUnlocked: true,
    world: "mercado",
  },
  {
    id: 4,
    title: "Manejo de Conflictos",
    type: "quiz",
    duration: 12,
    xpReward: 80,
    coinReward: 30,
    isCompleted: false,
    isUnlocked: false,
    world: "ciudad",
  },
  {
    id: 5,
    title: "Presentaciones Efectivas",
    type: "quiz",
    duration: 15,
    xpReward: 100,
    coinReward: 40,
    isCompleted: false,
    isUnlocked: false,
    world: "rio",
  },
]



const petData = {
  "baby-capybara": { name: "Capi Beb√©", icon: "üêπ" },
  "adult-capybara": { name: "Capi Adulto", icon: "ü¶´" },
  "golden-capybara": { name: "Capi Dorado", icon: "‚ú®ü¶´" },
  "ninja-capybara": { name: "Capi Ninja", icon: "ü•∑ü¶´" },
}



const DeckCarousel = ({
  courses,
  onCourseSelect,
}: { courses: Course[]; onCourseSelect: (courseId: string) => void }) => {
  const [currentIndex, setCurrentIndex] = useState(0)

  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % courses.length)
  }

  const handlePrev = () => {
    setCurrentIndex((prevIndex) => (prevIndex - 1 + courses.length) % courses.length)
  }

  const getCardPosition = (index: number) => {
    const position = (index - currentIndex + courses.length) % courses.length
    if (position === 0) return "center"
    if (position === 1 || position === courses.length - 1) return "side"
    return "hidden"
  }

  return (
    <div className="relative h-[550px] flex items-center justify-center px-8">
      <div className="relative w-full max-w-5xl flex items-center justify-center">
        {courses.map((course, index) => {
          const position = getCardPosition(index)
          const isActive = position === "center"
          const isLeft = index < currentIndex || (currentIndex === 0 && index === courses.length - 1)

          if (position === "hidden") return null

          return (
            <div
              key={course.id}
              className={`absolute transition-all duration-700 ease-out transform ${position === "center"
                ? "z-20 scale-110 opacity-100 translate-x-0"
                : position === "side"
                  ? isLeft
                    ? "z-10 scale-85 opacity-50 -translate-x-80"
                    : "z-10 scale-85 opacity-50 translate-x-80"
                  : "opacity-0"
                }`}
              style={{
                pointerEvents: isActive ? "auto" : "none",
              }}
            >
              <div
                className={`w-80 h-[450px] rounded-3xl p-8 shadow-2xl border-2 transition-all duration-700 bg-gradient-to-br ${course.color} ${isActive
                  ? "cursor-pointer hover:scale-105 hover:shadow-3xl border-white/40 hover:border-white/60"
                  : "cursor-default border-white/20"
                  }`}
                onClick={isActive ? () => onCourseSelect(course.id) : undefined}
                tabIndex={isActive ? 0 : -1}
                role="button"
                data-active={isActive}
                onKeyDown={(e) => {
                  if (isActive && (e.key === "Enter" || e.key === " ")) {
                    e.preventDefault()
                    onCourseSelect(course.id)
                  }
                }}
              >
                <div className="h-full flex flex-col justify-between text-white">
                  <div>
                    <div className="text-6xl mb-6 text-center drop-shadow-lg">{course.icon}</div>
                    <h3 className="text-2xl font-bold mb-4 text-center drop-shadow-md">{course.title}</h3>
                    <p className="text-white/90 mb-6 text-center leading-relaxed drop-shadow-sm">
                      {course.description}
                    </p>
                  </div>

                  <div className="space-y-4">
                    <div className="flex items-center justify-between text-sm text-white/90">
                      <span className="font-medium">Progreso</span>
                      <span className="font-bold">
                        {course.completedLevels} / {course.totalLevels}
                      </span>
                    </div>
                    <div className="w-full bg-white/20 rounded-full h-3 backdrop-blur-sm">
                      <div
                        className="bg-white h-3 rounded-full transition-all duration-500 shadow-sm"
                        style={{ width: `${(course.completedLevels / course.totalLevels) * 100}%` }}
                      />
                    </div>

                    {isActive && (
                      <Button className="w-full bg-white/20 hover:bg-white/30 text-white border-2 border-white/40 hover:border-white/60 backdrop-blur-sm font-bold py-3 rounded-xl transition-all duration-300">
                        {course.completedLevels > 0 ? "Continuar Aventura" : "Comenzar Aventura"}
                      </Button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )
        })}
      </div>

      <Button
        variant="outline"
        size="lg"
        onClick={handlePrev}
        className="absolute left-4 z-30 w-16 h-16 rounded-full border-2 border-white/40 text-white hover:bg-white/20 bg-black/20 backdrop-blur-md hover:border-white/60 transition-all duration-300"
        aria-label="Curso anterior"
      >
        <ChevronLeft className="w-8 h-8" />
      </Button>

      <Button
        variant="outline"
        size="lg"
        onClick={handleNext}
        className="absolute right-4 z-30 w-16 h-16 rounded-full border-2 border-white/40 text-white hover:bg-white/20 bg-black/20 backdrop-blur-md hover:border-white/60 transition-all duration-300"
        aria-label="Siguiente curso"
      >
        <ChevronRight className="w-8 h-8" />
      </Button>

      <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex gap-3">
        {courses.map((_, index) => (
          <button
            key={index}
            onClick={() => setCurrentIndex(index)}
            className={`w-3 h-3 rounded-full transition-all duration-300 ${index === currentIndex ? "bg-white shadow-lg scale-125" : "bg-white/40 hover:bg-white/60"
              }`}
            aria-label={`Ir al curso ${index + 1}`}
          />
        ))}
      </div>
    </div>
  )
}

export default function Nu9veAcademy() {
  const [userData, setUserData] = useState<UserData>(initialUserData)
  const [currentView, setCurrentView] = useState<"welcome" | "dashboard" | "course" | "level" | "shop" | "profile">(
    "welcome",
  )
  const [showDailyChest, setShowDailyChest] = useState(true)
  const [chestAnimation, setChestAnimation] = useState(false)
  const [lifeTimer, setLifeTimer] = useState(0)
  const [currentLevel, setCurrentLevel] = useState<number | null>(null)

  // const [selectedCourse, setSelectedCourse] = useState<string>("communication-v1")

  useEffect(() => {
    const interval = setInterval(() => {
      setUserData((prev: UserData) => {
        if (prev.lives < prev.maxLives) {
          const newTimer = lifeTimer + 1
          if (newTimer >= 15) {
            setLifeTimer(0)
            return { ...prev, lives: prev.lives + 1 }
          } else {
            setLifeTimer(newTimer)
            return prev
          }
        }
        return prev
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [lifeTimer])

  // Check for daily chest availability
  useEffect(() => {
    const today = new Date().toDateString()
    if (userData.lastDailyChest !== today) {
      setShowDailyChest(true)
    }
  }, [userData.lastDailyChest])

  const openDailyChest = () => {
    setChestAnimation(true)
    const rewards = {
      coins: Math.floor(Math.random() * 50) + 25,
      gems: Math.floor(Math.random() * 3) + 1,
      xp: Math.floor(Math.random() * 30) + 20,
    }

    setTimeout(() => {
      setUserData((prev) => ({
        ...prev,
        coins: prev.coins + rewards.coins,
        gems: prev.gems + rewards.gems,
        xp: prev.xp + rewards.xp,
        lastDailyChest: new Date().toDateString(),
      }))
      setShowDailyChest(false)
      setChestAnimation(false)
    }, 2000)
  }

  const buyLife = () => {
    if (userData.lives < userData.maxLives && userData.coins >= 15) {
      setUserData((prev) => ({
        ...prev,
        lives: prev.lives + 1,
        coins: prev.coins - 15,
      }))
    }
  }

  const startLevel = (levelId: number) => {
    setCurrentLevel(levelId)
    setCurrentView("level")
  }

  // const buyPet = (petId: string, price: number) => {
  //   if (userData.coins >= price) {
  //     setUserData((prev) => ({
  //       ...prev,
  //       coins: prev.coins - price,
  //       unlockedPets: [...prev.unlockedPets, petId],
  //     }))
  //   }
  // }

  // const selectPet = (petId: string) => {
  //   setUserData((prev) => ({
  //     ...prev,
  //     currentPet: petId,
  //   }))
  // }

  const loseLife = () => {
    setUserData((prev) => ({
      ...prev,
      lives: Math.max(0, prev.lives - 1),
    }))
  }

  const completeLevel = (levelId: number, xp: number, coins: number) => {
    setUserData((prev) => {
      const newCompletedLevels = [...prev.completedLevels]
      if (!newCompletedLevels.includes(levelId)) {
        newCompletedLevels.push(levelId)
      }

      return {
        ...prev,
        xp: prev.xp + xp,
        coins: prev.coins + coins,
        completedLevels: newCompletedLevels,
      }
    })

    const nextLevelIndex = communicationLevels.findIndex((level) => level.id === levelId + 1)
    if (nextLevelIndex !== -1) {
      communicationLevels[nextLevelIndex].isUnlocked = true
    }

    setCurrentView("course")
  }

  const renderWelcome = () => (
    <div
      className="relative min-h-screen w-full flex items-center justify-center bg-cover bg-center"
      style={{
        backgroundImage: `url('jungle-adventure-background.jpg')`,
      }}
    >
      {/* Capa oscura para contraste */}
      <div className="absolute inset-0 bg-black/50 backdrop-blur-sm"></div>

      {/* Contenido */}
      <div className="relative z-10 text-center text-white max-w-2xl mx-auto px-6">
        {/* Mascota */}
        <div className="text-[9rem] mb-10 animate-bounce">ü¶´</div>

        {/* T√≠tulo */}
        <h1 className="text-6xl sm:text-7xl font-extrabold text-orange-400 mb-8 drop-shadow-lg">
          Bienvenido a Nu9ve
        </h1>

        {/* Descripci√≥n */}
        <p className="text-2xl sm:text-3xl text-gray-100 mb-16 leading-relaxed drop-shadow-md">
          Aqu√≠ aprender√°s a expresarte con <br />
          confianza, empat√≠a y claridad.
        </p>

        {/* Botones alineados iguales */}
        <div className="flex flex-col sm:flex-row gap-6 justify-center">
          {/* Iniciar sesi√≥n con Google */}
          <div className="flex-1">
            <LoginButton />
          </div>

          {/* Continuar como Invitado */}
          <Button
            onClick={() => setCurrentView("dashboard")}
            className="flex-1 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white text-lg px-8 py-4 rounded-xl shadow-md flex items-center justify-center"
          >
            Continuar como Invitado
          </Button>
        </div>
      </div>
    </div>
  )



  const renderDashboard = () => (
    <div
      className="relative min-h-screen bg-cover bg-center bg-no-repeat"
      style={{
        backgroundImage: `url('/jungle-adventure-background.jpg')`, // tu fondo aqu√≠
      }}
    >
      {/* Degradado encima del fondo */}
      <div className="absolute inset-0 bg-gradient-to-br from-amber-900/30 via-orange-900/20 to-yellow-900/30"></div>

      {/* Contenido centrado encima */}
      <div className="relative z-10 max-w-5xl mx-auto px-6 py-12 space-y-8">
        {/* Tarjeta de bienvenida */}
        <div className="flex items-center justify-between bg-white/90 backdrop-blur-md rounded-2xl p-6 shadow-lg">
          <div className="flex items-center gap-4">
            <div className="text-5xl animate-bounce">
              {petData[userData.currentPet as keyof typeof petData]?.icon || "üêπ"}
            </div>
            <div>
              <h1 className="text-2xl font-bold text-amber-800 mb-1">¬°Hola, Explorador!</h1>
              <p className="text-amber-600">Contin√∫a tu aventura de aprendizaje</p>
            </div>
          </div>

          <div className="flex items-center gap-6">
            <div className="flex items-center gap-2">
              <Coins className="w-5 h-5 text-amber-500" />
              <span className="font-semibold text-amber-800">{userData.coins}</span>
            </div>
            <div className="flex items-center gap-2">
              <Gem className="w-5 h-5 text-cyan-500" />
              <span className="font-semibold text-cyan-800">{userData.gems}</span>
            </div>
            <div className="flex items-center gap-2">
              <Heart className="w-5 h-5 text-red-500" />
              <span className="font-semibold text-red-800">
                {userData.lives}/{userData.maxLives}
              </span>
              {userData.lives < userData.maxLives && (
                <div className="text-xs text-red-600 ml-1">+1 en {15 - lifeTimer}s</div>
              )}
            </div>
          </div>
        </div>

        {/* Tarjeta de progreso */}
        <div className="bg-white/90 backdrop-blur-md rounded-2xl p-4 shadow-lg">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-bold text-amber-800">Progreso General</h2>
            <div className="text-sm text-amber-600">{userData.completedLevels.length} niveles completados</div>
          </div>
          <div className="mt-2">
            <Progress
              value={
                (userData.completedLevels.length /
                  courses.reduce((acc, course) => acc + course.totalLevels, 0)) *
                100
              }
              className="h-2"
            />
          </div>
        </div>

        {/* Cofre diario */}
        {showDailyChest && (
          <Card className="border-2 border-amber-400 bg-white/90 backdrop-blur-md shadow-lg">
            <CardContent className="p-6 text-center">
              <div className={`text-6xl mb-4 ${chestAnimation ? "animate-bounce" : "animate-pulse"}`}>üéÅ</div>
              <h3 className="text-xl font-bold mb-2 text-amber-800">¬°Cofre Diario Disponible!</h3>
              <p className="text-amber-600 mb-4">Tu capibara ha encontrado un tesoro especial</p>
              <Button
                onClick={openDailyChest}
                className="bg-amber-500 hover:bg-amber-600 text-white shadow-lg"
                disabled={chestAnimation}
              >
                {chestAnimation ? "Abriendo..." : "Abrir Cofre"}
              </Button>
            </CardContent>
          </Card>
        )}

        {/* Cursos */}
        <div>
          <h2 className="text-3xl font-bold mb-8 text-white text-center drop-shadow-lg">Selecciona tu Curso</h2>
          <DeckCarousel
            courses={courses.map((course) => ({
              ...course,
              completedLevels: userData.completedLevels.filter((level) => {
                if (course.id === "communication-v1") return level >= 1 && level <= 12
                if (course.id === "communication-v2") return level >= 13 && level <= 24
                if (course.id === "communication-v3") return level >= 25 && level <= 36
                if (course.id === "communication-v4") return level >= 37 && level <= 48
                if (course.id === "communication-premium") return level >= 49 && level <= 60
                return false
              }).length,
            }))}
            onCourseSelect={() => setCurrentView("course")}
          />
        </div>
      </div>
    </div>
  )


  const renderShop = () => (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 p-6">
      <div className="max-w-4xl mx-auto">
        <div className="flex items-center gap-4 mb-6">
          <Button
            variant="outline"
            onClick={() => setCurrentView("dashboard")}
            className="border-amber-300 text-amber-700"
          >
            ‚Üê Volver
          </Button>
          <h1 className="text-3xl font-bold text-amber-800">üõçÔ∏è Tienda de Mascotas</h1>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {pets.map((pet) => (
            <Card key={pet.id} className="border-2 border-amber-200 hover:border-amber-400 transition-colors">
              <CardContent className="p-6 text-center">
                <div className="text-6xl mb-4">{pet.icon}</div>
                <h3 className="text-lg font-bold mb-2 text-amber-800">{pet.name}</h3>
                <div className="flex items-center justify-center gap-2 mb-4">
                  <Coins className="w-4 h-4 text-yellow-500" />
                  <span className="font-bold text-amber-700">{pet.price === 0 ? "Gratis" : pet.price}</span>
                </div>
                {userData.unlockedPets.includes(pet.id) ? (
                  <div className="space-y-2">
                    {userData.currentPet === pet.id ? (
                      <Button disabled className="w-full bg-green-100 text-green-800">
                        ‚úì Equipada
                      </Button>
                    ) : (
                      <Button
                        onClick={() => setUserData((prev) => ({ ...prev, currentPet: pet.id }))}
                        className="w-full bg-amber-500 hover:bg-amber-600 text-white"
                      >
                        Equipar
                      </Button>
                    )}
                  </div>
                ) : (
                  <Button
                    onClick={() => {
                      if (userData.coins >= pet.price) {
                        setUserData((prev) => ({
                          ...prev,
                          coins: prev.coins - pet.price,
                          unlockedPets: [...prev.unlockedPets, pet.id],
                          currentPet: pet.id,
                        }))
                      }
                    }}
                    disabled={userData.coins < pet.price}
                    className="w-full bg-amber-500 hover:bg-amber-600 text-white disabled:bg-gray-300"
                  >
                    {userData.coins >= pet.price ? "Comprar" : "Sin monedas"}
                  </Button>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  )

  const renderProfile = () => (
    <div className="space-y-6">
      <div className="flex items-center gap-4 mb-6">
        <Button variant="outline" onClick={() => setCurrentView("dashboard")}>
          ‚Üê Volver
        </Button>
        <h1 className="text-2xl font-bold">Mi Perfil</h1>
      </div>

      <Card>
        <CardContent className="p-6">
          <div className="flex items-center gap-6 mb-6">
            <div className="text-8xl">{pets.find((p) => p.id === userData.currentPet)?.icon}</div>
            <div>
              <h2 className="text-2xl font-bold">Explorador Nu9ve</h2>
              <p className="text-muted-foreground">Nivel {userData.level}</p>
              <Progress value={userData.xp % 100} className="w-48 mt-2" />
              <p className="text-sm text-muted-foreground mt-1">{userData.xp % 100}/100 XP para el siguiente nivel</p>
            </div>
          </div>

          <div className="grid md:grid-cols-3 gap-4">
            <div className="text-center p-4 bg-muted rounded-lg">
              <Trophy className="w-8 h-8 text-yellow-500 mx-auto mb-2" />
              <p className="font-bold text-lg">{userData.completedLevels.length}</p>
              <p className="text-sm text-muted-foreground">Niveles Completados</p>
            </div>
            <div className="text-center p-4 bg-muted rounded-lg">
              <Award className="w-8 h-8 text-purple-500 mx-auto mb-2" />
              <p className="font-bold text-lg">{userData.badges.length}</p>
              <p className="text-sm text-muted-foreground">Insignias Obtenidas</p>
            </div>
            <div className="text-center p-4 bg-muted rounded-lg">
              <Sparkles className="w-8 h-8 text-pink-500 mx-auto mb-2" />
              <p className="font-bold text-lg">{userData.unlockedPets.length}</p>
              <p className="text-sm text-muted-foreground">Mascotas Desbloqueadas</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  const renderCourse = () => {
    const getLevelIcon = (type: string) => {
      switch (type) {
        case "roleplay":
          return <MessageCircle className="w-6 h-6 text-blue-500" />
        case "interactive":
          return <Volume2 className="w-6 h-6 text-green-500" />
        case "video":
          return <Eye className="w-6 h-6 text-purple-500" />
        case "story":
          return <Users className="w-6 h-6 text-orange-500" />
        case "quiz":
          return <Presentation className="w-6 h-6 text-red-500" />
        default:
          return <Play className="w-6 h-6" />
      }
    }

    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4 mb-6">
          <Button
            variant="outline"
            onClick={() => setCurrentView("dashboard")}
            className="border-amber-300 text-amber-700 hover:bg-amber-50"
          >
            ‚Üê Volver
          </Button>
          <h1 className="text-2xl font-bold text-amber-800">Comunicaci√≥n Efectiva</h1>
          <div className="text-3xl animate-bounce">ü¶´</div>
        </div>

        <div className="relative">
          <div className="grid gap-6">
            {communicationLevels.map((level, index) => {
              const isUnlocked = index === 0 || userData.completedLevels.includes(index)
              const isCompleted = userData.completedLevels.includes(level.id)
              const displayType = level.type === "roleplay" ? "roleplay" : "quiz"

              return (
                <Card
                  key={level.id}
                  className={`relative overflow-hidden transition-all duration-300 ${isUnlocked ? "cursor-pointer hover:shadow-xl hover:scale-[1.02]" : "opacity-50"
                    } ${isCompleted ? "border-green-500 bg-green-50 shadow-green-200 shadow-lg" : "border-amber-200"}`}
                >
                  <div
                    className="absolute inset-0 opacity-20"
                    style={{
                      backgroundImage: `url('/--getlevelbackground-level-id--.png')`,
                      backgroundSize: "cover",
                      backgroundPosition: "center",
                    }}
                  ></div>

                  <CardContent className="p-6 relative z-10">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="relative">
                          {isCompleted ? (
                            <div className="relative">
                              <CheckCircle className="w-12 h-12 text-green-500" />
                              <div className="absolute -top-1 -right-1 text-xl">‚ú®</div>
                            </div>
                          ) : isUnlocked ? (
                            <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-full flex items-center justify-center text-white font-bold shadow-lg">
                              {level.id}
                            </div>
                          ) : (
                            <Lock className="w-12 h-12 text-gray-400" />
                          )}
                        </div>
                        <div>
                          <div className="flex items-center gap-2 mb-1">
                            {getLevelIcon(level.type)}
                            <h3 className="text-lg font-bold text-amber-800">{level.title}</h3>
                          </div>
                          <div className="flex items-center gap-4 text-sm text-amber-600">
                            <span>‚è±Ô∏è {level.duration} min</span>
                            <span>‚≠ê {level.xpReward} XP</span>
                            <span>ü™ô {level.coinReward} monedas</span>
                            <Badge variant="secondary" className="lowercase">
                              {displayType}
                            </Badge>
                          </div>
                          <p className="text-sm text-amber-600 mt-2">
                            {level.id === 1 && "Aprende a hacer una primera impresi√≥n positiva"}
                            {level.id === 2 && "T√©cnicas para escuchar activamente"}
                            {level.id === 3 && "Domina el lenguaje corporal efectivo"}
                            {level.id === 4 && "Resuelve conflictos con confianza"}
                            {level.id === 5 && "Presenta ideas de manera impactante"}
                          </p>
                        </div>
                      </div>
                      {isUnlocked && (
                        <Button
                          onClick={() => startLevel(level.id)}
                          disabled={!isUnlocked}
                          className="bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white shadow-lg"
                        >
                          {isCompleted ? "Repetir" : "Jugar"}
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </div>
      </div>
    )
  }

  return (
    <>
      {currentView === "welcome" && renderWelcome()}
      {currentView !== "welcome" && (
        <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
          <nav className="bg-white border-b border-amber-200 sticky top-0 z-50 shadow-sm">
            <div className="max-w-6xl mx-auto px-4 py-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="text-2xl animate-pulse">ü¶´</div>
                  <h1 className="text-xl font-bold text-amber-800">Nu9ve Academy</h1>
                </div>
                <div className="flex gap-2">
                  <Button
                    variant={currentView === "dashboard" ? "default" : "ghost"}
                    onClick={() => setCurrentView("dashboard")}
                    size="sm"
                    className={
                      currentView === "dashboard"
                        ? "bg-amber-500 hover:bg-amber-600"
                        : "text-amber-700 hover:bg-amber-50"
                    }
                  >
                    <Map className="w-4 h-4 mr-2" />
                    Dashboard
                  </Button>
                  <Button
                    variant={currentView === "shop" ? "default" : "ghost"}
                    onClick={() => setCurrentView("shop")}
                    size="sm"
                    className={
                      currentView === "shop" ? "bg-amber-500 hover:bg-amber-600" : "text-amber-700 hover:bg-amber-50"
                    }
                  >
                    <ShoppingBag className="w-4 h-4 mr-2" />
                    Tienda
                  </Button>
                  <Button
                    variant={currentView === "profile" ? "default" : "ghost"}
                    onClick={() => setCurrentView("profile")}
                    size="sm"
                    className={
                      currentView === "profile" ? "bg-amber-500 hover:bg-amber-600" : "text-amber-700 hover:bg-amber-50"
                    }
                  >
                    <User className="w-4 h-4 mr-2" />
                    Perfil
                  </Button>
                </div>
              </div>
            </div>
          </nav>

          <main className="min-h-screen w-full">
            {currentView === "dashboard" && renderDashboard()}
            {currentView === "course" && (
  <CourseList
    levels={communicationLevels}
    userData={userData}
    onBack={() => setCurrentView("dashboard")}
    onStartLevel={(id) => startLevel(id)}
  />
)}
            {currentView === "shop" && renderShop()}
            {currentView === "profile" && renderProfile()}
            {currentView === "level" && currentLevel && (
 <LevelComponent
  level={communicationLevels[currentLevel - 1]}   // ‚úÖ no levelId
  onComplete={(score, badges) => completeLevel(currentLevel, score, badges)}
  onBack={() => setCurrentView("course")}
  userData={userData}
  onLoseLife={loseLife}
/>
)}

          </main>
        </div>
      )}
    </>
  )
}
</file>

</files>
